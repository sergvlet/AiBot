package com.chicu.aibot.bot.menu.feature.ai.strategy;

import com.chicu.aibot.bot.menu.core.MenuState;
import com.chicu.aibot.trading.core.SchedulerService;
import com.chicu.aibot.strategy.StrategyType;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;

@Component
@RequiredArgsConstructor
public class AiSelectStrategyState implements MenuState {
    public static final String NAME = "ai_select_strategy";

    private final SchedulerService schedulerService;

    @Override
    public String name() {
        return NAME;
    }

    @Override
    public SendMessage render(Long chatId) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (StrategyType type : StrategyType.values()) {
            boolean active = schedulerService.isStrategyActive(chatId, type.name());
            String statusText = active ? "üü¢ –ó–∞–ø—É—â–µ–Ω–∞" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
            String buttonText = String.format("%s ‚Äî %s", type.getLabel(), statusText);

            // callbackData –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            String callbackData = switch (type) {
                case SCALPING -> "ai_trading_scalping_config";
                case FIBONACCI_GRID -> "ai_trading_fibonacci_config";
                case RSI_EMA -> "ai_trading_rsi_ema_config";
                case MA_CROSSOVER -> "ai_trading_ma_crossover_config";
                case BOLLINGER_BANDS -> "ai_trading_bollinger_config";
            };

            rows.add(List.of(
                    InlineKeyboardButton.builder()
                            .text(buttonText)
                            .callbackData(callbackData)
                            .build()
            ));
        }

        // –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é AI Trading
        rows.add(List.of(
                InlineKeyboardButton.builder()
                        .text("‚Äπ –ù–∞–∑–∞–¥")
                        .callbackData("ai_trading")
                        .build()
        ));

        return SendMessage.builder()
                .chatId(chatId.toString())
                .parseMode("Markdown")
                .text("""
                    *–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π AI*
                                            
                    –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –µ—ë –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏ –∑–∞–ø—É—Å–∫—É/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ.""")
                .replyMarkup(new InlineKeyboardMarkup(rows))
                .build();
    }

    @Override
    public String handleInput(Update update) {
        if (!update.hasCallbackQuery()) {
            return NAME;
        }
        String data = update.getCallbackQuery().getData();
        // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç
        if ("ai_trading".equals(data)) {
            return "ai_trading";
        }
        return data; // —Ç.–∫. callbackData –º—ã –∑–∞–¥–∞–ª–∏ –∫–∞–∫ –∏–º—è –Ω—É–∂–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è-–∫–æ–Ω—Ñ–∏–≥–∞
    }
}
