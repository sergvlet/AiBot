package com.chicu.aibot.bot.menu.feature.ai.strategy.ml_invest.service.impl;

import com.chicu.aibot.bot.menu.feature.ai.strategy.ml_invest.service.MlInvestPanelRenderer;
import com.chicu.aibot.bot.ui.AdaptiveKeyboard;
import com.chicu.aibot.bot.util.TelegramText;
import com.chicu.aibot.exchange.order.service.ExchangeOrderDbService;
import com.chicu.aibot.exchange.service.MarketLiveService;
import com.chicu.aibot.strategy.ml_invest.model.MachineLearningInvestStrategySettings;
import com.chicu.aibot.strategy.ml_invest.service.MachineLearningInvestStrategySettingsService;
import com.chicu.aibot.trading.trade.TradeLogService;
import com.chicu.aibot.trading.trade.model.TradeLogEntry;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import static com.chicu.aibot.bot.menu.feature.ai.strategy.view.PanelTextUtils.*;

/**
 * Telegram-–ø–∞–Ω–µ–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Machine Learning Invest.
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π MarkdownV2 + —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.
 */
@Component
@RequiredArgsConstructor
public class MlInvestPanelRendererImpl implements MlInvestPanelRenderer {

    public static final String NAME                = "ai_trading_ml_invest_config";
    public static final String BTN_REFRESH         = "ai_trading_ml_invest_refresh";
    public static final String BTN_TOGGLE_ACTIVE   = "ai_trading_ml_invest_toggle";
    public static final String BTN_EDIT_SYMBOL     = "ml_edit_symbol";
    public static final String BTN_EDIT_TF         = "ml_edit_timeframe";
    public static final String BTN_EDIT_CANDLES    = "ml_edit_cachedCandlesLimit";
    public static final String BTN_EDIT_THRESHOLDS = "ml_edit_thresholds";
    public static final String BTN_EDIT_TP_SL      = "ml_edit_tp_sl";
    public static final String BTN_EDIT_MODEL      = "ml_edit_modelPath";
    public static final String BTN_EDIT_VOLUME     = "ml_edit_volumeMode";
    public static final String BTN_EDIT_QTY        = "ml_edit_orderQty";
    public static final String BTN_EDIT_QUOTE      = "ml_edit_orderQuoteAmount";
    public static final String BTN_HELP            = "ai_trading_ml_invest_help";

    private final MachineLearningInvestStrategySettingsService settingsService;
    private final TradeLogService tradeLogService;
    private final ExchangeOrderDbService orderDb;
    private final MarketLiveService liveService;

    @Override
    public SendMessage render(Long chatId) {
        MachineLearningInvestStrategySettings s = settingsService.getOrCreate(chatId);
        String symbol = nvl(s.getSymbol());
        var live = liveService.build(chatId, symbol);

        Optional<TradeLogEntry> lastTradeOpt = tradeLogService.getLastTrade(chatId, symbol);
        String pnlBlock = lastTradeOpt.map(last -> buildPnlBlock(last, symbol, live)).orElse("_–Ω–µ—Ç —Å–¥–µ–ª–æ–∫_");
        String totalPnlBlock = formatTotalPnl(tradeLogService.getTotalPnl(chatId, symbol));
        var openOrders = orderDb.findOpenByChatAndSymbol(chatId, symbol);
        String openOrdersBlock = formatOpenOrdersBlock(openOrders);

        String volumeModeLine = s.isUseQuoteAmount()
                ? "‚Ä¢ –†–µ–∂–∏–º –æ–±—ä—ë–º–∞: –ø–æ *—Å—É–º–º–µ (Quote)*, " + fmt(s.getOrderQuoteAmount())
                : "‚Ä¢ –†–µ–∂–∏–º –æ–±—ä—ë–º–∞: –ø–æ *–∫–æ–ª–∏—á–µ—Å—Ç–≤—É (Qty)*, " + fmt(s.getOrderQty());

        String text = ("""
                *ü§ñ Machine Learning Invest*
                –°—Ç–∞—Ç—É—Å: %s

                *–†—ã–Ω–æ–∫:* `%s`
                %s –ò–∑–º.: %s | üíµ –¶–µ–Ω–∞: `%s`

                *–°–¥–µ–ª–∫–∏ / PnL:*
                %s
                %s

                *–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (%d):*
                %s

                *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `%s`
                ‚Ä¢ –°–≤–µ—á–∏: `%d`
                ‚Ä¢ BUY threshold: `%s`
                ‚Ä¢ SELL threshold: `%s`
                ‚Ä¢ TP: `%s%%` ‚Ä¢ SL: `%s%%`
                ‚Ä¢ –ú–æ–¥–µ–ª—å: `%s`
                %s
                """).stripTrailing().formatted(
                s.isActive() ? "üü¢ *–ó–∞–ø—É—â–µ–Ω–∞*" : "üî¥ *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*",
                symbol,
                (live.getChangePct() >= 0 ? "üìà" : "üìâ"),
                nvl(live.getChangeStr()),
                nvl(live.getPriceStr()),
                pnlBlock,
                totalPnlBlock,
                openOrders.size(),
                openOrdersBlock,
                nvl(s.getTimeframe()),
                safeI(s.getCachedCandlesLimit()),
                fmt(s.getBuyThreshold()),
                fmt(s.getSellThreshold()),
                fmt(s.getTakeProfitPct()),
                fmt(s.getStopLossPct()),
                nvl(s.getModelPath()),
                volumeModeLine
        );

        // ‚úÖ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º Markdown-—Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è —Ç–æ—á–∫–∏
        text = TelegramText.escapeMarkdownV1(text);

        InlineKeyboardMarkup markup = AdaptiveKeyboard.markupFromGroups(List.of(
                List.of(
                        AdaptiveKeyboard.btn("‚Äπ –ù–∞–∑–∞–¥", "ai_trading"),
                        AdaptiveKeyboard.btn("‚è± –û–±–Ω–æ–≤–∏—Ç—å", BTN_REFRESH),
                        AdaptiveKeyboard.btn("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", BTN_HELP)
                ),
                List.of(
                        AdaptiveKeyboard.btn("üí± –°–∏–º–≤–æ–ª", BTN_EDIT_SYMBOL),
                        AdaptiveKeyboard.btn("üïí –¢–∞–π–º—Ñ—Ä–µ–π–º", BTN_EDIT_TF),
                        AdaptiveKeyboard.btn("üìä –°–≤–µ—á–∏", BTN_EDIT_CANDLES)
                ),
                List.of(
                        AdaptiveKeyboard.btn("üéØ BUY/SELL thr", BTN_EDIT_THRESHOLDS),
                        AdaptiveKeyboard.btn("üí∞ TP / SL", BTN_EDIT_TP_SL)
                ),
                List.of(
                        AdaptiveKeyboard.btn("ü§ñ –ú–æ–¥–µ–ª—å", BTN_EDIT_MODEL),
                        AdaptiveKeyboard.btn("‚öôÔ∏è –û–±—ä—ë–º", BTN_EDIT_VOLUME)
                ),
                List.of(
                        AdaptiveKeyboard.btn("Qty", BTN_EDIT_QTY),
                        AdaptiveKeyboard.btn("Quote", BTN_EDIT_QUOTE)
                ),
                List.of(
                        AdaptiveKeyboard.btn(s.isActive() ? "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é" : "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", BTN_TOGGLE_ACTIVE)
                )
        ), 3);
        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .replyMarkup(markup)
                .build();
    }

    private static int safeI(Integer v) { return v == null ? 0 : v; }

    private static String fmt(BigDecimal v) {
        if (v == null) return "‚Äî";
        return v.stripTrailingZeros().toPlainString();
    }
}
