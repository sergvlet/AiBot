package com.chicu.aibot.bot.menu.feature.ai.strategy.ml_invest.service.impl;

import com.chicu.aibot.bot.menu.feature.ai.strategy.ml_invest.AiTradingMlInvestAdjustState;
import com.chicu.aibot.bot.menu.feature.ai.strategy.ml_invest.service.MlInvestPanelRenderer;
import com.chicu.aibot.strategy.ml_invest.model.MachineLearningInvestStrategySettings;
import com.chicu.aibot.strategy.ml_invest.service.MachineLearningInvestStrategySettingsService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class MlInvestPanelRendererImpl implements MlInvestPanelRenderer {

    public static final String BTN_REFRESH       = "ai_trading_ml_invest_refresh";
    public static final String BTN_TOGGLE_ACTIVE = "ai_trading_ml_invest_toggle";
    public static final String BTN_EDIT_SYMBOL   = "ml_edit_symbol";
    public static final String BTN_HELP          = "ai_trading_ml_invest_help";

    private final MachineLearningInvestStrategySettingsService settingsService;

    @Override
    public SendMessage render(Long chatId) {
        MachineLearningInvestStrategySettings s = settingsService.getOrCreate(chatId);

        String status = s.isActive() ? "‚úÖ –∞–∫—Ç–∏–≤–Ω–∞" : "‚ùå –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
        String volumeModeLine = s.isUseQuoteAmount()
                ? "‚Ä¢ –†–µ–∂–∏–º –æ–±—ä—ë–º–∞: –ø–æ —Å—É–º–º–µ (Quote)\n‚Ä¢ Quote: " + fmt(s.getOrderQuoteAmount())
                : "‚Ä¢ –†–µ–∂–∏–º –æ–±—ä—ë–º–∞: –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (Qty)\n‚Ä¢ Qty: " + fmt(s.getOrderQty());

        String volumeWarning = "";
        if (!s.isUseQuoteAmount() && (s.getOrderQty() == null || s.getOrderQty().signum() <= 0)) {
            volumeWarning = "\n‚ö†Ô∏è Qty –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Å–¥–µ–ª–∫–∏ –Ω–µ –±—É–¥—É—Ç –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å—Å—è";
        }
        if (s.isUseQuoteAmount() && (s.getOrderQuoteAmount() == null || s.getOrderQuoteAmount().signum() <= 0)) {
            volumeWarning = "\n‚ö†Ô∏è Quote –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Å–¥–µ–ª–∫–∏ –Ω–µ –±—É–¥—É—Ç –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å—Å—è";
        }

        String text = """
                ü§ñ *Machine Learning Invest*
                –°—Ç–∞—Ç—É—Å: %s

                –†—ã–Ω–æ–∫: %s
                Œî –ò–∑–º.: ‚Äî | üíµ –¶–µ–Ω–∞: ‚Äî

                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
                ‚Ä¢ TF: %s   ‚Ä¢ –°–≤–µ—á–∏: %s
                ‚Ä¢ BUY thr: %s   ‚Ä¢ SELL thr: %s
                ‚Ä¢ TP%%: %s   ‚Ä¢ SL%%: %s
                ‚Ä¢ –ú–æ–¥–µ–ª—å: %s
                %s%s
                """.formatted(
                status,
                nullSafe(s.getSymbol()),
                nullSafe(s.getTimeframe()),
                s.getCachedCandlesLimit() == null ? "‚Äî" : String.valueOf(s.getCachedCandlesLimit()),
                nullSafe(s.getBuyThreshold()),
                nullSafe(s.getSellThreshold()),
                nullSafe(s.getTakeProfitPct()),
                nullSafe(s.getStopLossPct()),
                nullSafe(s.getModelPath()),
                "\n" + volumeModeLine,
                volumeWarning
        );

        InlineKeyboardMarkup kb = buildKeyboard(s);
        return SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(text)
                .parseMode("Markdown")
                .replyMarkup(kb)
                .build();
    }

    private InlineKeyboardMarkup buildKeyboard(MachineLearningInvestStrategySettings s) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(List.of(
                btn(s.isActive() ? "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" : "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", BTN_TOGGLE_ACTIVE),
                btn("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", BTN_REFRESH)
        ));
        rows.add(List.of(
                btn("¬´ –ù–∞–∑–∞–¥", "ai_trading"),
                btn("‚ÑπÔ∏è –ü–æ–º–æ—â—å", BTN_HELP)
        ));
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
        rows.add(List.of(
                btn("–¢–∞–π–º—Ñ—Ä–µ–π–º", "ml_edit_timeframe"),
                btn("–°–≤–µ—á–∏", "ml_edit_cachedCandlesLimit")
        ));
        rows.add(List.of(
                btn("BUY thr", "ml_edit_buyThreshold"),
                btn("SELL thr", "ml_edit_sellThreshold")
        ));
        rows.add(List.of(
                btn("TP / SL", "ml_edit_tp_sl"),
                btn("–ú–æ–¥–µ–ª—å", "ml_edit_modelPath")
        ));
        rows.add(List.of(
                btn("–°–∏–º–≤–æ–ª", BTN_EDIT_SYMBOL),
                btn("–†–µ–∂–∏–º –æ–±—ä—ë–º–∞", "ml_edit_volumeMode")
        ));
        rows.add(List.of(
                btn("Qty", "ml_edit_orderQty"),
                btn("Quote", "ml_edit_orderQuoteAmount")
        ));

        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);
        return kb;
    }

    private InlineKeyboardButton btn(String t, String d) {
        InlineKeyboardButton b = new InlineKeyboardButton(t);
        b.setCallbackData(d);
        return b;
    }

    private String fmt(BigDecimal v) { return v == null ? "‚Äî" : v.toPlainString(); }
    private String nullSafe(Object o) { return o == null ? "‚Äî" : String.valueOf(o); }
}
