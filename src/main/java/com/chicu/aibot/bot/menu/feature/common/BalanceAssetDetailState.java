package com.chicu.aibot.bot.menu.feature.common;

import com.chicu.aibot.bot.menu.core.MenuState;
import com.chicu.aibot.exchange.client.ExchangeClient;
import com.chicu.aibot.exchange.client.ExchangeClientFactory;
import com.chicu.aibot.exchange.model.AccountInfo;
import com.chicu.aibot.exchange.model.BalanceInfo;
import com.chicu.aibot.exchange.model.TickerInfo;
import com.chicu.aibot.exchange.service.ExchangeSettingsService;
import com.chicu.aibot.strategy.model.Order;
import com.chicu.aibot.strategy.service.OrderService;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Component("balance_asset_detail")
@RequiredArgsConstructor
public class BalanceAssetDetailState implements MenuState {

    private final ExchangeSettingsService settingsService;
    private final ExchangeClientFactory clientFactory;
    private final OrderService orderService;

    @Setter
    private String currentAsset; // –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–Ω–µ—Ç–∞

    /** –û–∂–∏–¥–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (SELL –∏–ª–∏ BUY) –ø–æ —á–∞—Ç–∞–º */
    private final Map<Long, String> pendingAction = new ConcurrentHashMap<>();

    /** –§–ª–µ—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º render –∏ –æ—á–∏—â–∞–µ—Ç—Å—è */
    private final Map<Long, String> flashNotice = new ConcurrentHashMap<>();

    @Override
    public String name() {
        return "balance_asset_detail";
    }

    @Override
    public SendMessage render(Long chatId) {
        // –¥–æ—Å—Ç–∞—ë–º –∏ –æ—á–∏—â–∞–µ–º —Ñ–ª–µ—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        String notice = flashNotice.remove(chatId);
        return buildMessage(chatId, currentAsset, notice);
    }

    @Override
    public String handleInput(Update update) {
        if (!update.hasCallbackQuery()) return name();

        String data = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();

        switch (data) {
            case "balance_assets" -> {
                this.currentAsset = null;
                return "balance_assets";
            }
            case "convert_to_usdt" -> {
                pendingAction.put(chatId, "SELL");
                return name(); // –æ—Å—Ç–∞—ë–º—Å—è —Ç—É—Ç ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            }
            case "buy_with_usdt" -> {
                pendingAction.put(chatId, "BUY");
                return name();
            }
            case "confirm_yes" -> {
                String action = pendingAction.remove(chatId);
                if ("SELL".equals(action)) {
                    executeSell(chatId);
                    return name(); // –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞—ë–º—Å—è –∑–¥–µ—Å—å –∏ –ø–æ–∫–∞–∂–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é
                }
                if ("BUY".equals(action)) {
                    executeBuy(chatId);
                    return name();
                }
                return name();
            }
            case "confirm_no" -> {
                pendingAction.remove(chatId);
                return name();
            }
            case "refresh_balance" -> {
                return name();
            }
            default -> {
                // –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–∞
                if (data.startsWith("cancel_order:")) {
                    String orderId = data.substring("cancel_order:".length());
                    try {
                        List<Order> active = orderService.loadActiveOrders(chatId, currentAsset + "USDT");
                        active.stream()
                                .filter(o -> orderId.equals(o.getId()))
                                .findFirst()
                                .ifPresent(o -> orderService.cancel(chatId, o));

                        flashNotice.put(chatId, "‚úÖ –û—Ä–¥–µ—Ä " + orderId + " –∑–∞–∫—Ä—ã—Ç");
                    } catch (Exception e) {
                        flashNotice.put(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: " + e.getMessage());
                    }
                    return name(); // –í–ê–ñ–ù–û: –æ—Å—Ç–∞—ë–º—Å—è –≤ —ç—Ç–æ–º –∂–µ –º–µ–Ω—é
                }
                return name();
            }
        }
    }

    /** –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–Ω–µ—Ç—ã –≤ USDT ‚Äî –∫–ª–∞–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ —Ñ–ª–µ—à –∏ –æ—Å—Ç–∞—ë–º—Å—è –≤ —ç—Ç–æ–º –º–µ–Ω—é */
    private void executeSell(Long chatId) {
        String result;
        try {
            var settings = settingsService.getOrCreate(chatId);
            var keys = settingsService.getApiKey(chatId);
            ExchangeClient client = clientFactory.getClient(settings.getExchange());

            AccountInfo acc = client.fetchAccountInfo(keys.getPublicKey(), keys.getSecretKey(), settings.getNetwork());
            Optional<BalanceInfo> balanceOpt = acc.getBalances().stream()
                    .filter(b -> currentAsset.equalsIgnoreCase(b.getAsset()))
                    .findFirst();

            if (balanceOpt.isPresent()) {
                BalanceInfo b = balanceOpt.get();
                BigDecimal free = b.getFree();
                if (free.compareTo(BigDecimal.ZERO) > 0) {
                    String symbol = currentAsset + "USDT";
                    orderService.placeMarket(chatId, symbol, Order.Side.SELL, free.doubleValue());
                    result = "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ " + free.stripTrailingZeros() + " " + currentAsset + " ‚Üí USDT";
                } else {
                    result = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.";
                }
            } else {
                result = "‚ùå –ë–∞–ª–∞–Ω—Å –ø–æ " + currentAsset + " –Ω–µ –Ω–∞–π–¥–µ–Ω.";
            }
        } catch (Exception e) {
            result = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: " + e.getMessage();
        }
        flashNotice.put(chatId, result);
    }

    /** –ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç—ã –∑–∞ USDT ‚Äî –∫–ª–∞–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ —Ñ–ª–µ—à –∏ –æ—Å—Ç–∞—ë–º—Å—è –≤ —ç—Ç–æ–º –º–µ–Ω—é */
    private void executeBuy(Long chatId) {
        String result;
        try {
            var settings = settingsService.getOrCreate(chatId);
            var keys = settingsService.getApiKey(chatId);
            ExchangeClient client = clientFactory.getClient(settings.getExchange());

            AccountInfo acc = client.fetchAccountInfo(keys.getPublicKey(), keys.getSecretKey(), settings.getNetwork());
            Optional<BalanceInfo> usdtOpt = acc.getBalances().stream()
                    .filter(b -> "USDT".equalsIgnoreCase(b.getAsset()))
                    .findFirst();

            if (usdtOpt.isPresent()) {
                BalanceInfo usdt = usdtOpt.get();
                BigDecimal freeUsdt = usdt.getFree();
                if (freeUsdt.compareTo(BigDecimal.ZERO) > 0) {
                    String symbol = currentAsset + "USDT";
                    orderService.placeMarket(chatId, symbol, Order.Side.BUY, freeUsdt.doubleValue());
                    result = "‚úÖ –ö—É–ø–ª–µ–Ω–æ " + currentAsset + " –Ω–∞ " + freeUsdt.stripTrailingZeros() + " USDT";
                } else {
                    result = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏.";
                }
            } else {
                result = "‚ùå –ë–∞–ª–∞–Ω—Å USDT –Ω–µ –Ω–∞–π–¥–µ–Ω.";
            }
        } catch (Exception e) {
            result = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: " + e.getMessage();
        }
        flashNotice.put(chatId, result);
    }

    /** –†–µ–Ω–¥–µ—Ä –±–∞–ª–∞–Ω—Å–∞ + –∫–Ω–æ–ø–æ–∫ */
    private SendMessage buildMessage(Long chatId, String asset, String notice) {
        if (asset == null) {
            return SendMessage.builder().chatId(chatId.toString()).text("‚ùå –ú–æ–Ω–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞").build();
        }

        var settings = settingsService.getOrCreate(chatId);
        var keys = settingsService.getApiKey(chatId);
        ExchangeClient client = clientFactory.getClient(settings.getExchange());

        StringBuilder text = new StringBuilder();
        text.append("üí∞ *–ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã ").append(asset).append("*\n\n");

        BigDecimal free = BigDecimal.ZERO;
        BigDecimal locked = BigDecimal.ZERO;
        BigDecimal total = BigDecimal.ZERO;
        BigDecimal usdValue = BigDecimal.ZERO;
        List<Order> active = Collections.emptyList();

        try {
            AccountInfo acc = client.fetchAccountInfo(keys.getPublicKey(), keys.getSecretKey(), settings.getNetwork());
            Optional<BalanceInfo> balanceOpt = acc.getBalances().stream()
                    .filter(b -> asset.equalsIgnoreCase(b.getAsset()))
                    .findFirst();

            if (balanceOpt.isPresent()) {
                BalanceInfo b = balanceOpt.get();
                free = b.getFree().setScale(8, RoundingMode.HALF_UP).stripTrailingZeros();
                locked = b.getLocked().setScale(8, RoundingMode.HALF_UP).stripTrailingZeros();
                total = free.add(locked);

                if (!"USDT".equalsIgnoreCase(asset)) {
                    Optional<TickerInfo> ticker = client.getTicker(asset + "USDT", settings.getNetwork());
                    if (ticker.isPresent()) {
                        usdValue = total.multiply(ticker.get().getPrice()).setScale(2, RoundingMode.HALF_UP);
                    }
                } else {
                    usdValue = total.setScale(2, RoundingMode.HALF_UP);
                }
            }

            // –æ—Ä–¥–µ—Ä–∞
            active = orderService.loadActiveOrders(chatId, asset + "USDT");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage());
        }

        text.append("–°–≤–æ–±–æ–¥–Ω–æ: `").append(free).append("`\n");
        text.append("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: `").append(locked).append("`\n");

        if (!active.isEmpty()) {
            text.append("üìå *–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:*\n");
            for (Order o : active) {
                text.append("‚Ä¢ ").append(o.getSide())
                        .append(" ").append(o.getVolume())
                        .append(" @ ").append(o.getPrice())
                        .append(o.isFilled() ? " ‚úÖ" : " ‚è≥")
                        .append(" (id=").append(o.getId()).append(")\n");
            }
        } else {
            if (locked.compareTo(BigDecimal.ZERO) > 0) {
                text.append("üìå –û—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç (–±–∏—Ä–∂–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç locked=").append(locked).append(")\n");
            } else {
                text.append("üìå –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç\n");
            }
        }

        text.append("–í—Å–µ–≥–æ: `").append(total).append("`\n");
        text.append("üíµ ~ –í USDT: *").append(usdValue).append("*\n");

        if (notice != null && !notice.isBlank()) {
            text.append("\n").append(notice);
        }

        // --- –∫–Ω–æ–ø–∫–∏ ---
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if ("SELL".equals(pendingAction.get(chatId))) {
            rows.add(List.of(
                    InlineKeyboardButton.builder().text("‚úÖ –î–∞, –ø—Ä–æ–¥–∞—Ç—å").callbackData("confirm_yes").build(),
                    InlineKeyboardButton.builder().text("‚ùå –û—Ç–º–µ–Ω–∞").callbackData("confirm_no").build()
            ));
        } else if ("BUY".equals(pendingAction.get(chatId))) {
            rows.add(List.of(
                    InlineKeyboardButton.builder().text("‚úÖ –î–∞, –∫—É–ø–∏—Ç—å").callbackData("confirm_yes").build(),
                    InlineKeyboardButton.builder().text("‚ùå –û—Ç–º–µ–Ω–∞").callbackData("confirm_no").build()
            ));
        } else {
            if (!"USDT".equalsIgnoreCase(asset)) {
                rows.add(List.of(
                        InlineKeyboardButton.builder().text("üí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ USDT").callbackData("convert_to_usdt").build(),
                        InlineKeyboardButton.builder().text("üõí –ö—É–ø–∏—Ç—å –Ω–∞ USDT").callbackData("buy_with_usdt").build()
                ));
            }
            rows.add(List.of(
                    InlineKeyboardButton.builder().text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å").callbackData("refresh_balance").build(),
                    InlineKeyboardButton.builder().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥").callbackData("balance_assets").build()
            ));

            for (Order o : active) {
                rows.add(List.of(
                        InlineKeyboardButton.builder()
                                .text("‚ùå –ó–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä " + o.getId())
                                .callbackData("cancel_order:" + o.getId())
                                .build()
                ));
            }
        }

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text.toString())
                .parseMode("Markdown")
                .replyMarkup(InlineKeyboardMarkup.builder().keyboard(rows).build())
                .build();
    }
}
