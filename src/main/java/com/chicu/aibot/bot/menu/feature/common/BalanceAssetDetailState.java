package com.chicu.aibot.bot.menu.feature.common;

import com.chicu.aibot.bot.menu.core.MenuState;
import com.chicu.aibot.exchange.client.ExchangeClient;
import com.chicu.aibot.exchange.client.ExchangeClientFactory;
import com.chicu.aibot.exchange.model.AccountInfo;
import com.chicu.aibot.exchange.model.BalanceInfo;
import com.chicu.aibot.exchange.model.TickerInfo;
import com.chicu.aibot.exchange.service.ExchangeSettingsService;
import com.chicu.aibot.strategy.model.Order;
import com.chicu.aibot.strategy.service.OrderService;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.*;

@Slf4j
@Component("balance_asset_detail")
@RequiredArgsConstructor
public class BalanceAssetDetailState implements MenuState {

    private final ExchangeSettingsService settingsService;
    private final ExchangeClientFactory clientFactory;
    private final OrderService orderService;

    @Setter
    private String currentAsset; // –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–Ω–µ—Ç–∞

    /** –û–∂–∏–¥–∞–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (SELL –∏–ª–∏ BUY) –ø–æ —á–∞—Ç–∞–º */
    private final Map<Long, String> pendingAction = new HashMap<>();

    @Override
    public String name() {
        return "balance_asset_detail";
    }

    @Override
    public SendMessage render(Long chatId) {
        if (currentAsset == null) {
            return SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞")
                    .replyMarkup(InlineKeyboardMarkup.builder()
                            .keyboard(List.of(List.of(
                                    InlineKeyboardButton.builder()
                                            .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")
                                            .callbackData("balance_assets")
                                            .build()
                            ))).build())
                    .build();
        }
        return buildMessage(chatId, currentAsset, null);
    }

    @Override
    public String handleInput(Update update) {
        if (!update.hasCallbackQuery()) return "balance_menu";

        String data = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();

        switch (data) {
            case "balance_assets" -> {
                this.currentAsset = null;
                return "balance_assets";
            }
            case "convert_to_usdt" -> {
                pendingAction.put(chatId, "SELL");
                return name();
            }
            case "buy_with_usdt" -> {
                pendingAction.put(chatId, "BUY");
                return name();
            }
            case "confirm_yes" -> {
                String action = pendingAction.remove(chatId);
                if ("SELL".equals(action)) return executeSell(chatId);
                if ("BUY".equals(action)) return executeBuy(chatId);
            }
            case "confirm_no" -> {
                pendingAction.remove(chatId);
                return name();
            }
            case "refresh_balance" -> {
                return name();
            }
        }

        return name();
    }

    /** –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–æ–Ω–µ—Ç—ã –≤ USDT */
    private String executeSell(Long chatId) {
        String result;
        try {
            var settings = settingsService.getOrCreate(chatId);
            var keys = settingsService.getApiKey(chatId);
            ExchangeClient client = clientFactory.getClient(settings.getExchange());

            AccountInfo acc = client.fetchAccountInfo(keys.getPublicKey(), keys.getSecretKey(), settings.getNetwork());
            Optional<BalanceInfo> balanceOpt = acc.getBalances().stream()
                    .filter(b -> currentAsset.equalsIgnoreCase(b.getAsset()))
                    .findFirst();

            if (balanceOpt.isPresent()) {
                BalanceInfo b = balanceOpt.get();
                BigDecimal free = b.getFree();
                if (free.compareTo(BigDecimal.ZERO) > 0) {
                    String symbol = currentAsset + "USDT";
                    orderService.placeMarket(chatId, symbol, Order.Side.SELL, free.doubleValue());
                    result = "‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ " + free.stripTrailingZeros().toPlainString()
                            + " " + currentAsset + " ‚Üí USDT";
                } else {
                    result = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.";
                }
            } else {
                result = "‚ùå –ë–∞–ª–∞–Ω—Å –ø–æ " + currentAsset + " –Ω–µ –Ω–∞–π–¥–µ–Ω.";
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {} ‚Üí USDT: {}", currentAsset, e.getMessage(), e);
            result = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: " + e.getMessage();
        }
        // ‚úÖ —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ name(), –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ notice
        return buildMessage(chatId, currentAsset, result).getText();
    }

    /** –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –º–æ–Ω–µ—Ç—ã –Ω–∞ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å USDT */
    private String executeBuy(Long chatId) {
        String result;
        try {
            var settings = settingsService.getOrCreate(chatId);
            var keys = settingsService.getApiKey(chatId);
            ExchangeClient client = clientFactory.getClient(settings.getExchange());

            AccountInfo acc = client.fetchAccountInfo(keys.getPublicKey(), keys.getSecretKey(), settings.getNetwork());
            Optional<BalanceInfo> usdtOpt = acc.getBalances().stream()
                    .filter(b -> "USDT".equalsIgnoreCase(b.getAsset()))
                    .findFirst();

            if (usdtOpt.isPresent()) {
                BalanceInfo usdt = usdtOpt.get();
                BigDecimal freeUsdt = usdt.getFree();
                if (freeUsdt.compareTo(BigDecimal.ZERO) > 0) {
                    String symbol = currentAsset + "USDT";
                    orderService.placeMarket(chatId, symbol, Order.Side.BUY, freeUsdt.doubleValue());
                    result = "‚úÖ –ö—É–ø–ª–µ–Ω–æ " + currentAsset + " –Ω–∞ "
                            + freeUsdt.stripTrailingZeros().toPlainString() + " USDT";
                } else {
                    result = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏.";
                }
            } else {
                result = "‚ùå –ë–∞–ª–∞–Ω—Å USDT –Ω–µ –Ω–∞–π–¥–µ–Ω.";
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ {} –∑–∞ USDT: {}", currentAsset, e.getMessage(), e);
            result = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: " + e.getMessage();
        }
        return buildMessage(chatId, currentAsset, result).getText();
    }

    private SendMessage buildMessage(Long chatId, String asset, String notice) {
        var settings = settingsService.getOrCreate(chatId);
        var keys = settingsService.getApiKey(chatId);
        ExchangeClient client = clientFactory.getClient(settings.getExchange());

        Optional<BalanceInfo> balanceOpt = Optional.empty();
        try {
            AccountInfo acc = client.fetchAccountInfo(keys.getPublicKey(), keys.getSecretKey(), settings.getNetwork());
            balanceOpt = acc.getBalances().stream()
                    .filter(b -> asset.equalsIgnoreCase(b.getAsset()))
                    .findFirst();
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ {}: {}", asset, e.getMessage());
        }

        String text;
        if (balanceOpt.isPresent()) {
            BalanceInfo b = balanceOpt.get();
            BigDecimal free = b.getFree().setScale(8, RoundingMode.HALF_UP).stripTrailingZeros();
            BigDecimal locked = b.getLocked().setScale(8, RoundingMode.HALF_UP).stripTrailingZeros();
            BigDecimal total = free.add(locked);

            BigDecimal usdValue = BigDecimal.ZERO;
            if (!"USDT".equalsIgnoreCase(asset)) {
                try {
                    String symbol = asset + "USDT";
                    Optional<TickerInfo> ticker = client.getTicker(symbol, settings.getNetwork());
                    if (ticker.isPresent()) {
                        usdValue = total.multiply(ticker.get().getPrice()).setScale(2, RoundingMode.HALF_UP);
                    }
                } catch (Exception e) {
                    log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {} –≤ USDT: {}", asset, e.getMessage());
                }
            } else {
                usdValue = total.setScale(2, RoundingMode.HALF_UP);
            }

            text = String.format(
                    """
                    üí∞ *–ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã %s*
                    
                    –°–≤–æ–±–æ–¥–Ω–æ: `%s`
                    –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: `%s`
                    –í—Å–µ–≥–æ: `%s`
                    
                    üíµ ~ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ USDT: *%s*""",
                    b.getAsset(),
                    free.toPlainString(),
                    locked.toPlainString(),
                    total.toPlainString(),
                    usdValue.toPlainString()
            );
        } else {
            text = "‚ùå –ë–∞–ª–∞–Ω—Å –¥–ª—è –º–æ–Ω–µ—Ç—ã `" + asset + "` –Ω–µ –Ω–∞–π–¥–µ–Ω";
        }

        if (notice != null) {
            text += "\n\n" + notice;
        }

        // --- –∫–Ω–æ–ø–∫–∏ ---
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if ("SELL".equals(pendingAction.get(chatId))) {
            rows.add(List.of(
                    InlineKeyboardButton.builder().text("‚úÖ –î–∞, –ø—Ä–æ–¥–∞—Ç—å").callbackData("confirm_yes").build(),
                    InlineKeyboardButton.builder().text("‚ùå –û—Ç–º–µ–Ω–∞").callbackData("confirm_no").build()
            ));
            text += "\n\n‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É *" + asset + "* ‚Üí USDT";
        } else if ("BUY".equals(pendingAction.get(chatId))) {
            rows.add(List.of(
                    InlineKeyboardButton.builder().text("‚úÖ –î–∞, –∫—É–ø–∏—Ç—å").callbackData("confirm_yes").build(),
                    InlineKeyboardButton.builder().text("‚ùå –û—Ç–º–µ–Ω–∞").callbackData("confirm_no").build()
            ));
            text += "\n\n‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É *" + asset + "* –∑–∞ USDT";
        } else {
            if (!"USDT".equalsIgnoreCase(asset)) {
                rows.add(List.of(
                        InlineKeyboardButton.builder().text("üí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ USDT").callbackData("convert_to_usdt").build(),
                        InlineKeyboardButton.builder().text("üõí –ö—É–ø–∏—Ç—å –Ω–∞ USDT").callbackData("buy_with_usdt").build()
                ));
            }
            rows.add(List.of(
                    InlineKeyboardButton.builder().text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å").callbackData("refresh_balance").build(),
                    InlineKeyboardButton.builder().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥").callbackData("balance_assets").build()
            ));
        }

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .replyMarkup(InlineKeyboardMarkup.builder().keyboard(rows).build())
                .build();
    }
}
