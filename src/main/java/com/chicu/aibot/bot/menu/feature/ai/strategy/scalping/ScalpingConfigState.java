package com.chicu.aibot.bot.menu.feature.ai.strategy.scalping;

import com.chicu.aibot.bot.menu.core.MenuSessionService;
import com.chicu.aibot.bot.menu.core.MenuState;
import com.chicu.aibot.bot.menu.feature.common.AiSelectSymbolState;
import com.chicu.aibot.strategy.scalping.model.ScalpingStrategySettings;
import com.chicu.aibot.strategy.scalping.service.ScalpingStrategySettingsService;
import com.chicu.aibot.trading.scheduler.SchedulerService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;

@Component
@RequiredArgsConstructor
public class ScalpingConfigState implements MenuState {

    public static final String NAME = "ai_trading_scalping_config";

    private final ScalpingStrategySettingsService settingsService;
    private final MenuSessionService sessionService;
    private final SchedulerService schedulerService;

    @Override
    public String name() {
        return NAME;
    }

    @Override
    public SendMessage render(Long chatId) {
        ScalpingStrategySettings s = settingsService.getOrCreate(chatId);

        String text = """
                *üìä Scalping Strategy*

                *–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ –°–∏–º–≤–æ–ª: `%s`
                ‚Ä¢ –û–±—ä–µ–º: `%.4f`
                ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `%s`
                ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: `%d` —Å–≤–µ—á–µ–π
                ‚Ä¢ –û–∫–Ω–æ: `%d` —Å–≤–µ—á–µ–π
                ‚Ä¢ Œî–¶–µ–Ω—ã: `%.2f%%`
                ‚Ä¢ –ú–∞–∫—Å. —Å–ø—Ä–µ–¥: `%.2f%%`
                ‚Ä¢ TP: `%.2f%%` ‚Ä¢ SL: `%.2f%%`
                ‚Ä¢ –°—Ç–∞—Ç—É—Å: *%s*
                """.formatted(
                s.getSymbol(),
                s.getOrderVolume(),
                s.getTimeframe(),
                s.getCachedCandlesLimit(),
                s.getWindowSize(),
                s.getPriceChangeThreshold(),
                s.getSpreadThreshold(),
                s.getTakeProfitPct(),
                s.getStopLossPct(),
                s.isActive() ? "üü¢ –ó–∞–ø—É—â–µ–Ω–∞" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        );

        List<List<InlineKeyboardButton>> rows = new ArrayList<>(List.of(
                List.of(button("‚úèÔ∏è –ü–∞—Ä–∞", "edit_symbol"), button("‚úèÔ∏è –û–±—ä–µ–º", "scalp_edit_orderVolume"), button("‚úèÔ∏è –ò—Å—Ç–æ—Ä–∏—è", "scalp_edit_cachedCandlesLimit")),
                List.of(button("‚úèÔ∏è –û–∫–Ω–æ", "scalp_edit_windowSize"), button("‚úèÔ∏è Œî–¶–µ–Ω—ã", "scalp_edit_priceChangeThreshold"), button("‚úèÔ∏è –ú–∞–∫—Å. —Å–ø—Ä–µ–¥", "scalp_edit_spreadThreshold")),
                List.of(button("‚úèÔ∏è TP", "scalp_edit_takeProfitPct"), button("‚úèÔ∏è SL", "scalp_edit_stopLossPct"), button("‚Äπ –ù–∞–∑–∞–¥", "ai_trading")),
                List.of(button(s.isActive() ? "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é" : "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", "scalp_toggle_active"))
        ));

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .replyMarkup(InlineKeyboardMarkup.builder().keyboard(rows).build())
                .build();
    }

    @Override
    public String handleInput(Update update) {
        if (!update.hasCallbackQuery()) return NAME;

        String data = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();

        if (!data.equals("edit_symbol")) {
            if (data.equals("scalp_toggle_active")) {
                ScalpingStrategySettings s = settingsService.getOrCreate(chatId);
                s.setActive(!s.isActive());
                if (s.isActive()) {
                    schedulerService.startStrategy(chatId, s.getType().name());
                } else {
                    schedulerService.stopStrategy(chatId, s.getType().name());
                }
                settingsService.save(s);
                return NAME;
            } else if (data.equals("ai_trading")) {
                return "ai_trading";
            }
        } else {
            sessionService.setEditingField(chatId, "symbol");
            sessionService.setReturnState(chatId, NAME);
            return AiSelectSymbolState.NAME;
        }

        if (data.startsWith("scalp_edit_")) {
            String field = data.substring("scalp_edit_".length());
            sessionService.setEditingField(chatId, field);
            return ScalpingAdjustState.NAME;
        }

        return NAME;
    }

    private InlineKeyboardButton button(String text, String data) {
        return InlineKeyboardButton.builder().text(text).callbackData(data).build();
    }
}
