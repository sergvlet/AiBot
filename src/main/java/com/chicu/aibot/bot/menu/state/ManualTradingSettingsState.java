package com.chicu.aibot.bot.menu.state;

import com.chicu.aibot.bot.menu.core.MenuService;
import com.chicu.aibot.bot.menu.core.MenuState;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

@Slf4j
@Component
public class ManualTradingSettingsState implements MenuState {

    private final InlineKeyboardMarkup keyboard;

    public ManualTradingSettingsState() {
        this.keyboard = InlineKeyboardMarkup.builder()
            .keyboard(List.of(
                List.of(
                    InlineKeyboardButton.builder()
                        .text("üîÑ Spot")
                        .callbackData("manual_spot")
                        .build(),
                    InlineKeyboardButton.builder()
                        .text("üìà Futures")
                        .callbackData("manual_futures")
                        .build(),
                    InlineKeyboardButton.builder()
                        .text("‚öñÔ∏è Margin")
                        .callbackData("manual_margin")
                        .build()
                ),
                List.of(
                    InlineKeyboardButton.builder()
                        .text("üìù –û—Ä–¥–µ—Ä–∞")
                        .callbackData("manual_orders")
                        .build(),
                    InlineKeyboardButton.builder()
                        .text("üí∞ –ë–∞–ª–∞–Ω—Å")
                        .callbackData("manual_balance")
                        .build(),
                    InlineKeyboardButton.builder()
                        .text("üïí –ò—Å—Ç–æ—Ä–∏—è")
                        .callbackData("manual_history")
                        .build()
                ),
                List.of(
                    InlineKeyboardButton.builder()
                        .text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                        .callbackData("manual_settings")
                        .build(),
                    InlineKeyboardButton.builder()
                        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                        .callbackData(MenuService.MAIN_MENU)
                        .build()
                )
            ))
            .build();
    }

    @Override
    public String name() {
        return "manual_trading_settings";
    }

    @Override
    public SendMessage render(Long chatId) {
        log.info("–†–µ–Ω–¥–µ—Ä –ø–æ–¥–º–µ–Ω—é —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è chatId={}", chatId);
        return SendMessage.builder()
                .chatId(chatId.toString())
                .text("*‚úã –†—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:")
                .parseMode("Markdown")
                .replyMarkup(keyboard)
                .build();
    }

    @Override
    public String handleInput(Update update) {
        if (update.hasCallbackQuery()) {
            String data = update.getCallbackQuery().getData();
            log.info("ManualTradingSettingsState: –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '{}'", data);
            return switch (data) {
                case "manual_spot"      -> "manual_spot";
                case "manual_futures"   -> "manual_futures";
                case "manual_margin"    -> "manual_margin";
                case "manual_orders"    -> "manual_orders";
                case "manual_balance"   -> "manual_balance";
                case "manual_history"   -> "manual_history";
                case "manual_settings"  -> "manual_settings";
                case MenuService.MAIN_MENU -> MenuService.MAIN_MENU;
                default -> {
                    log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback '{}' –≤ —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ, –æ—Å—Ç–∞—ë–º—Å—è", data);
                    yield name();
                }
            };
        }
        log.info("ManualTradingSettingsState: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é");
        return name();
    }
}
