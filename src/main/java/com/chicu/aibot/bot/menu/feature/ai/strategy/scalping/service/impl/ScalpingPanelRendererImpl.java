package com.chicu.aibot.bot.menu.feature.ai.strategy.scalping.service.impl;

import com.chicu.aibot.bot.menu.feature.ai.strategy.scalping.service.ScalpingLiveService;
import com.chicu.aibot.bot.menu.feature.ai.strategy.scalping.service.ScalpingPanelRenderer;
import com.chicu.aibot.bot.menu.feature.ai.strategy.view.LiveSnapshot;
import com.chicu.aibot.bot.ui.AdaptiveKeyboard;
import com.chicu.aibot.exchange.order.model.ExchangeOrderEntity;
import com.chicu.aibot.exchange.order.service.ExchangeOrderDbService;
import com.chicu.aibot.strategy.scalping.model.ScalpingStrategySettings;
import com.chicu.aibot.strategy.scalping.service.ScalpingStrategySettingsService;
import com.chicu.aibot.trading.trade.TradeLogService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

import static com.chicu.aibot.bot.menu.feature.ai.strategy.view.PanelTextUtils.*;

@Component
@RequiredArgsConstructor
public class ScalpingPanelRendererImpl implements ScalpingPanelRenderer {

    public static final String NAME            = "ai_trading_scalping_config";
    public static final String BTN_REFRESH     = "scalp_refresh";
    public static final String BTN_EDIT_SYMBOL = "edit_symbol";
    public static final String BTN_TOGGLE      = "scalp_toggle_active";
    public static final String BTN_HELP        = "scalp_help";

    private final ScalpingStrategySettingsService settingsService;
    private final ScalpingLiveService liveService;
    private final TradeLogService tradeLogService;
    private final ExchangeOrderDbService orderDb;

    @Override
    public SendMessage render(Long chatId) {
        ScalpingStrategySettings s = settingsService.getOrCreate(chatId);
        String symbol = nvl(s.getSymbol());

        LiveSnapshot live = liveService.build(chatId, symbol);

        var lastTrade = tradeLogService.getLastTrade(chatId, symbol).orElse(null);
        String pnlBlock = buildPnlBlock(lastTrade, symbol, live);

        List<ExchangeOrderEntity> openOrders = orderDb.findOpenByChatAndSymbol(chatId, symbol);
        String openOrdersBlock = formatOpenOrdersBlock(openOrders);
        int openCount = openOrders.size();

        String text = ("""
                *üìä Scalping Strategy*
                %s

                *–†—ã–Ω–æ–∫:* `%s`
                –ò–∑–º.: %s  |  –¶–µ–Ω–∞: `%s`

                *–ë–∞–ª–∞–Ω—Å:*
                ‚Ä¢ %s: `%s`
                ‚Ä¢ %s: `%s`

                *–°–¥–µ–ª–∫–∏ / PnL:*
                %s

                *–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (%d):*
                %s

                *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ –û–±—ä–µ–º: `%.4f`
                ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `%s`
                ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: `%d` ‚Ä¢ –û–∫–Ω–æ: `%d`
                ‚Ä¢ Œî–¶–µ–Ω—ã: `%.2f%%` ‚Ä¢ –ú–∞–∫—Å. —Å–ø—Ä–µ–¥: `%.2f%%`
                ‚Ä¢ TP: `%.2f%%` ‚Ä¢ SL: `%.2f%%`
                ‚Ä¢ –°—Ç–∞—Ç—É—Å: *%s*
                """).stripTrailing().formatted(
                s.isActive() ? "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: üü¢ *–ó–∞–ø—É—â–µ–Ω–∞*" : "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: üî¥ *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*",

                symbol,
                live.getChangeStr(),
                live.getPriceStr(),

                live.getBase(),  live.getBaseBal(),
                live.getQuote(), live.getQuoteBal(),

                pnlBlock,

                openCount,
                openOrdersBlock,

                s.getOrderVolume(),
                s.getTimeframe(),
                s.getCachedCandlesLimit(),
                s.getWindowSize(),
                s.getPriceChangeThreshold(),
                s.getSpreadThreshold(),
                s.getTakeProfitPct(),
                s.getStopLossPct(),
                s.isActive() ? "üü¢ –ó–∞–ø—É—â–µ–Ω–∞" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        );

        // ‚Äî‚Äî‚Äî –ö–ù–û–ü–ö–ò ‚Äî‚Äî‚Äî
        var g1 = List.of(
                button("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", BTN_HELP),
                button("‚è± –û–±–Ω–æ–≤–∏—Ç—å", BTN_REFRESH)
        );
        var g2 = List.of(
                button("üéØ –°–∏–º–≤–æ–ª", BTN_EDIT_SYMBOL),
                button("‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º", "scalp_edit_timeframe"),
                button("üí∞ –û–±—ä—ë–º —Å–¥–µ–ª–∫–∏, %", "scalp_edit_orderVolume"),
                button("üìã –ò—Å—Ç–æ—Ä–∏—è", "scalp_edit_cachedCandlesLimit")
        );
        var g3 = List.of(
                button("ü™ü –û–∫–Ω–æ", "scalp_edit_windowSize"),
                button("‚ö° –¢—Ä–∏–≥–≥–µ—Ä –≤—Ö–æ–¥–∞, %", "scalp_edit_priceChangeThreshold"),
                button("‚ÜîÔ∏è –ú–∞–∫—Å. —Å–ø—Ä–µ–¥, %", "scalp_edit_spreadThreshold")
        );
        var g4 = List.of(
                button("üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç, %", "scalp_edit_takeProfitPct"),
                button("üõ° –°—Ç–æ–ø-–ª–æ—Å—Å, %", "scalp_edit_stopLossPct")
        );
        var g5 = List.of(
                button("‚ñ∂Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –í–ö–õ/–í–´–ö–õ", BTN_TOGGLE),
                button("‚Äπ –ù–∞–∑–∞–¥", "ai_trading")
        );

        InlineKeyboardMarkup markup = AdaptiveKeyboard.markupFromGroups(List.of(g1, g2, g3, g4, g5));

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .replyMarkup(markup)
                .build();
    }

    private InlineKeyboardButton button(String text, String data) {
        return InlineKeyboardButton.builder().text(text).callbackData(data).build();
    }
}
