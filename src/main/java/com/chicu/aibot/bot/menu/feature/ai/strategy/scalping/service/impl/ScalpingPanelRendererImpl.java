package com.chicu.aibot.bot.menu.feature.ai.strategy.scalping.service.impl;

import com.chicu.aibot.bot.menu.feature.ai.strategy.scalping.service.ScalpingPanelRenderer;
import com.chicu.aibot.bot.menu.feature.ai.strategy.view.LiveSnapshot;
import com.chicu.aibot.bot.ui.AdaptiveKeyboard;
import com.chicu.aibot.exchange.order.model.ExchangeOrderEntity;
import com.chicu.aibot.exchange.order.service.ExchangeOrderDbService;
import com.chicu.aibot.exchange.service.MarketLiveService;
import com.chicu.aibot.strategy.scalping.model.ScalpingStrategySettings;
import com.chicu.aibot.strategy.scalping.service.ScalpingStrategySettingsService;
import com.chicu.aibot.trading.trade.TradeLogService;
import com.chicu.aibot.trading.trade.model.TradeLogEntry;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.util.List;
import java.util.Optional;

import static com.chicu.aibot.bot.menu.feature.ai.strategy.view.PanelTextUtils.*;

@Component
@RequiredArgsConstructor
public class ScalpingPanelRendererImpl implements ScalpingPanelRenderer {

    public static final String NAME               = "ai_trading_scalping_config";

    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    public static final String BTN_REFRESH        = "scalp_refresh";
    public static final String BTN_HELP           = "scalp_help";
    public static final String BTN_EDIT_SYMBOL    = "scalp_edit_symbol";
    public static final String BTN_TOGGLE_ACTIVE  = "scalp_toggle_active";

    // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    public static final String BTN_EDIT_TF        = "scalp_edit_timeframe";
    public static final String BTN_EDIT_ORDER_VOL = "scalp_edit_orderVolume";
    public static final String BTN_EDIT_HISTORY   = "scalp_edit_cachedCandlesLimit";
    public static final String BTN_EDIT_WINDOW    = "scalp_edit_windowSize";
    public static final String BTN_EDIT_DELTA_PCT = "scalp_edit_priceChangeThreshold";
    public static final String BTN_EDIT_SPREAD_PCT= "scalp_edit_spreadThreshold";
    public static final String BTN_EDIT_TP        = "scalp_edit_takeProfitPct";
    public static final String BTN_EDIT_SL        = "scalp_edit_stopLossPct";

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞–º–∏
    public static final String BTN_CANCEL_NEAREST = "scalp_cancel_nearest";
    public static final String BTN_CANCEL_ALL     = "scalp_cancel_all";

    private final ScalpingStrategySettingsService settingsService;
    private final MarketLiveService liveService;
    private final TradeLogService tradeLogService;
    private final ExchangeOrderDbService orderDb;

    @Override
    public SendMessage render(Long chatId) {
        ScalpingStrategySettings s = settingsService.getOrCreate(chatId);
        String symbol = nvl(s.getSymbol());
        LiveSnapshot live = liveService.build(chatId, symbol);

        // PnL –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ —Å–¥–µ–ª–æ–∫ (–∫–∞–∫ –≤ Bollinger)
        Optional<TradeLogEntry> lastTradeOpt = tradeLogService.getLastTrade(chatId, symbol);
        String pnlBlock = lastTradeOpt.map(last -> buildPnlBlock(last, symbol, live)).orElse("_–Ω–µ—Ç —Å–¥–µ–ª–æ–∫_");
        String totalPnlBlock = formatTotalPnl(tradeLogService.getTotalPnl(chatId, symbol));

        // –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        List<ExchangeOrderEntity> openOrders = orderDb.findOpenByChatAndSymbol(chatId, symbol);
        String openOrdersBlock = formatOpenOrdersBlock(openOrders);

        String text = ("""
                *üìä Scalping Strategy*
                %s

                *–†—ã–Ω–æ–∫:* `%s`
                %s –ò–∑–º.: %s | üíµ –¶–µ–Ω–∞: `%s`

                *–ë–∞–ª–∞–Ω—Å:*
                ‚Ä¢ %s: `%s`
                ‚Ä¢ %s: `%s`

                *–°–¥–µ–ª–∫–∏ / PnL:*
                %s
                %s

                *–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (%d):*
                %s

                *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ –û–±—ä–µ–º: `%.4f`
                ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `%s`
                ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: `%d`
                ‚Ä¢ –û–∫–Ω–æ: `%d`
                ‚Ä¢ Œî–¶–µ–Ω—ã: `%.2f%%` ‚Ä¢ –°–ø—Ä–µ–¥: `%.2f%%`
                ‚Ä¢ TP: `%.2f%%` ‚Ä¢ SL: `%.2f%%`
                ‚Ä¢ –°—Ç–∞—Ç—É—Å: *%s*
                """).stripTrailing().formatted(
                s.isActive() ? "üü¢ *–ó–∞–ø—É—â–µ–Ω–∞*" : "üî¥ *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*",
                symbol,
                live.getChangePct() >= 0 ? "üìà" : "üìâ",
                nvl(live.getChangeStr()),
                nvl(live.getPriceStr()),
                nvl(live.getBase()), nvl(live.getBaseBal()),
                nvl(live.getQuote()), nvl(live.getQuoteBal()),
                pnlBlock,
                totalPnlBlock,
                openOrders.size(),
                openOrdersBlock,
                safeD(s.getOrderVolume()),
                nvl(s.getTimeframe()),
                safeI(s.getCachedCandlesLimit()),
                safeI(s.getWindowSize()),
                safeD(s.getPriceChangeThreshold()),
                safeD(s.getSpreadThreshold()),
                safeD(s.getTakeProfitPct()),
                safeD(s.getStopLossPct()),
                s.isActive() ? "üü¢ –ó–∞–ø—É—â–µ–Ω–∞" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        );

        // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ (–ø–æ 3 –≤ —Ä—è–¥)
        InlineKeyboardMarkup markup = AdaptiveKeyboard.markupFromGroups(List.of(
                List.of(
                        AdaptiveKeyboard.btn("‚Äπ –ù–∞–∑–∞–¥", "ai_trading"),
                        AdaptiveKeyboard.btn("‚è± –û–±–Ω–æ–≤–∏—Ç—å", BTN_REFRESH),
                        AdaptiveKeyboard.btn("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", BTN_HELP)
                ),
                List.of(
                        AdaptiveKeyboard.btn("üéØ –°–∏–º–≤–æ–ª", BTN_EDIT_SYMBOL),
                        AdaptiveKeyboard.btn("‚è± –¢–§", BTN_EDIT_TF),
                        AdaptiveKeyboard.btn("üìã –ò—Å—Ç–æ—Ä–∏—è", BTN_EDIT_HISTORY)
                ),
                List.of(
                        AdaptiveKeyboard.btn("üí∞ –û–±—ä—ë–º %", BTN_EDIT_ORDER_VOL),
                        AdaptiveKeyboard.btn("ü™ü –û–∫–Ω–æ", BTN_EDIT_WINDOW),
                        AdaptiveKeyboard.btn("‚ö° Œî–¶–µ–Ω—ã %", BTN_EDIT_DELTA_PCT)
                ),
                List.of(
                        AdaptiveKeyboard.btn("‚ÜîÔ∏è –°–ø—Ä–µ–¥ %", BTN_EDIT_SPREAD_PCT),
                        AdaptiveKeyboard.btn("üéØ TP %", BTN_EDIT_TP),
                        AdaptiveKeyboard.btn("üõ° SL %", BTN_EDIT_SL)
                ),
                List.of(
                        AdaptiveKeyboard.btn("‚ùå –ë–ª–∏–∂–∞–π—à–∏–π –æ—Ä–¥–µ—Ä", BTN_CANCEL_NEAREST),
                        AdaptiveKeyboard.btn("üßπ –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", BTN_CANCEL_ALL),
                        AdaptiveKeyboard.btn(s.isActive() ? "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" : "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å", BTN_TOGGLE_ACTIVE)
                )
        ), 3);

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .replyMarkup(markup)
                .build();
    }

    /* ===== –ª–æ–∫–∞–ª—å–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã, –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –ø–∞–Ω–µ–ª—è—Ö ===== */
    private static int safeI(Integer v) { return v == null ? 0 : v; }
    private static double safeD(Double v) { return v == null ? 0d : v; }
}
