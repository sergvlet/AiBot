package com.chicu.aibot.bot.menu.feature.ai.strategy.scalping.service.impl;

import com.chicu.aibot.bot.menu.feature.ai.strategy.scalping.service.ScalpingPanelRenderer;
import com.chicu.aibot.bot.menu.feature.ai.strategy.view.LiveSnapshot;
import com.chicu.aibot.bot.ui.AdaptiveKeyboard;
import com.chicu.aibot.exchange.order.model.ExchangeOrderEntity;
import com.chicu.aibot.exchange.order.service.ExchangeOrderDbService;
import com.chicu.aibot.exchange.service.MarketLiveService;
import com.chicu.aibot.strategy.scalping.model.ScalpingStrategySettings;
import com.chicu.aibot.strategy.scalping.service.ScalpingStrategySettingsService;
import com.chicu.aibot.trading.trade.TradeLogService;
import com.chicu.aibot.trading.trade.model.TradeLogEntry;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;
import java.util.Optional;

import static com.chicu.aibot.bot.menu.feature.ai.strategy.view.PanelTextUtils.*;

@Component
@RequiredArgsConstructor
public class ScalpingPanelRendererImpl implements ScalpingPanelRenderer {

    public static final String NAME            = "ai_trading_scalping_config";
    public static final String BTN_REFRESH     = "scalp_refresh";
    public static final String BTN_EDIT_SYMBOL = "scalp_edit_symbol";
    public static final String BTN_TOGGLE      = "scalp_toggle_active";
    public static final String BTN_HELP        = "scalp_help";

    private final ScalpingStrategySettingsService settingsService;
    private final MarketLiveService liveService;
    private final TradeLogService tradeLogService;
    private final ExchangeOrderDbService orderDb;

    @Override
    public SendMessage render(Long chatId) {
        ScalpingStrategySettings s = settingsService.getOrCreate(chatId);
        String symbol = nvl(s.getSymbol());

        LiveSnapshot live = liveService.build(chatId, symbol);

        // ===== –°–¥–µ–ª–∫–∏ / PnL =====
        Optional<TradeLogEntry> lastTradeOpt = tradeLogService.getLastTrade(chatId, symbol);
        String pnlBlock = lastTradeOpt
                .map(last -> buildPnlBlock(last, symbol, live))
                .orElse("_–Ω–µ—Ç —Å–¥–µ–ª–æ–∫_");

        double totalPnl = tradeLogService.getTotalPnl(chatId, symbol).orElse(0.0);

        // ===== –û—Ä–¥–µ—Ä–∞ =====
        List<ExchangeOrderEntity> openOrders = orderDb.findOpenByChatAndSymbol(chatId, symbol);
        String openOrdersBlock = formatOpenOrdersBlock(openOrders);

        // ===== –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç =====
        String text = ("""
                *üìä Scalping Strategy*
                –°—Ç–∞—Ç—É—Å: %s

                *–†—ã–Ω–æ–∫:* `%s`
                %s –ò–∑–º.: %s | üíµ –¶–µ–Ω–∞: `%s`

                *–ë–∞–ª–∞–Ω—Å:*
                ‚ö° %s: `%s`
                üíµ %s: `%s`

                *–°–¥–µ–ª–∫–∏ / PnL:*
                %s
                üí∞ –í—Å–µ–≥–æ PnL: %+.2f USDT

                *–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (%d):*
                %s

                *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ –û–±—ä–µ–º: `%.4f`
                ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `%s`
                ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: `%d`
                ‚Ä¢ –û–∫–Ω–æ: `%d`
                ‚Ä¢ Œî–¶–µ–Ω—ã: `%.2f%%`
                ‚Ä¢ –ú–∞–∫—Å. —Å–ø—Ä–µ–¥: `%.2f%%`
                ‚Ä¢ TP: `%.2f%%` ‚Ä¢ SL: `%.2f%%`
                """).stripTrailing().formatted(
                s.isActive() ? "üü¢ *–ó–∞–ø—É—â–µ–Ω–∞*" : "üî¥ *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*",

                symbol,
                live.getChangePct() >= 0 ? "üìà" : "üìâ",
                live.getChangeStr(),
                live.getPriceStr(),

                live.getBase(), live.getBaseBal(),
                live.getQuote(), live.getQuoteBal(),

                pnlBlock,
                totalPnl,

                openOrders.size(),
                openOrdersBlock,

                s.getOrderVolume(),
                s.getTimeframe(),
                s.getCachedCandlesLimit(),
                s.getWindowSize(),
                s.getPriceChangeThreshold(),
                s.getSpreadThreshold(),
                s.getTakeProfitPct(),
                s.getStopLossPct()
        );

        // ===== –ö–Ω–æ–ø–∫–∏ =====
        List<InlineKeyboardButton> g1 = List.of(
                AdaptiveKeyboard.btn("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", BTN_HELP),
                AdaptiveKeyboard.btn("‚è± –û–±–Ω–æ–≤–∏—Ç—å", BTN_REFRESH),
                AdaptiveKeyboard.btn("‚Äπ –ù–∞–∑–∞–¥", "ai_trading")
        );
        List<InlineKeyboardButton> g2 = List.of(
                AdaptiveKeyboard.btn("üéØ –°–∏–º–≤–æ–ª", BTN_EDIT_SYMBOL),
                AdaptiveKeyboard.btn("üí∞ –û–±—ä—ë–º %", "scalp_edit_orderVolume"),
                AdaptiveKeyboard.btn("‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º", "scalp_edit_timeframe"),
                AdaptiveKeyboard.btn("üìã –ò—Å—Ç–æ—Ä–∏—è", "scalp_edit_cachedCandlesLimit")
        );
        List<InlineKeyboardButton> g3 = List.of(
                AdaptiveKeyboard.btn("ü™ü –û–∫–Ω–æ", "scalp_edit_windowSize"),
                AdaptiveKeyboard.btn("‚ö° Œî–¶–µ–Ω—ã %", "scalp_edit_priceChangeThreshold"),
                AdaptiveKeyboard.btn("‚ÜîÔ∏è –°–ø—Ä–µ–¥ %", "scalp_edit_spreadThreshold")
        );
        List<InlineKeyboardButton> g4 = List.of(
                AdaptiveKeyboard.btn("üéØ TP %", "scalp_edit_takeProfitPct"),
                AdaptiveKeyboard.btn("üõ° SL %", "scalp_edit_stopLossPct")
        );
        List<InlineKeyboardButton> g5 = List.of(
                AdaptiveKeyboard.btn(s.isActive() ? "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é" : "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", BTN_TOGGLE)
        );

        InlineKeyboardMarkup markup = AdaptiveKeyboard.markupFromGroups(List.of(g1, g2, g3, g4, g5), 3);

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .replyMarkup(markup)
                .build();
    }
}
