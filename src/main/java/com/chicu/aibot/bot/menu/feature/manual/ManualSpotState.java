package com.chicu.aibot.bot.menu.feature.manual;

import com.chicu.aibot.bot.menu.core.MenuState;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

@Slf4j
@Component
public class ManualSpotState implements MenuState {

    private final InlineKeyboardMarkup keyboard;

    public ManualSpotState() {
        this.keyboard = InlineKeyboardMarkup.builder()
            .keyboard(List.of(
                List.of(
                    InlineKeyboardButton.builder()
                        .text("BTC/USDT")
                        .callbackData("spot_pair_btc_usdt")
                        .build(),
                    InlineKeyboardButton.builder()
                        .text("ETH/USDT")
                        .callbackData("spot_pair_eth_usdt")
                        .build(),
                    InlineKeyboardButton.builder()
                        .text("ADA/USDT")
                        .callbackData("spot_pair_ada_usdt")
                        .build()
                ),
                List.of(
                    InlineKeyboardButton.builder()
                        .text("üìà Market")
                        .callbackData("spot_order_market")
                        .build(),
                    InlineKeyboardButton.builder()
                        .text("üìâ Limit")
                        .callbackData("spot_order_limit")
                        .build()
                ),
                List.of(
                    InlineKeyboardButton.builder()
                        .text("üü¢ Buy")
                        .callbackData("spot_action_buy")
                        .build(),
                    InlineKeyboardButton.builder()
                        .text("üî¥ Sell")
                        .callbackData("spot_action_sell")
                        .build()
                ),
                List.of(
                    InlineKeyboardButton.builder()
                        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                        .callbackData("manual_trading_settings")
                        .build()
                )
            ))
            .build();
    }

    @Override
    public String name() {
        return "manual_spot";
    }

    @Override
    public SendMessage render(Long chatId) {
        log.info("–†–µ–Ω–¥–µ—Ä Spot-–ø–æ–¥–º–µ–Ω—é –¥–ª—è chatId={}", chatId);
        String text = """
                *üîÑ Spot Trading* ‚Äî —ç—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–µ–∫—É—â–∏–º —Ä—ã–Ω–æ—á–Ω—ã–º —Ü–µ–Ω–∞–º, \
                –∫–æ–≥–¥–∞ –≤—ã —Å—Ä–∞–∑—É –ø–æ–∫—É–ø–∞–µ—Ç–µ –∏–ª–∏ –ø—Ä–æ–¥–∞—ë—Ç–µ –∞–∫—Ç–∏–≤ —Å —Ä–∞—Å—á—ë—Ç–æ–º –Ω–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ.
                
                1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
                2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ (Market / Limit)
                3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ *Buy* –∏–ª–∏ *Sell*""";
        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .replyMarkup(keyboard)
                .build();
    }


    @Override
    public String handleInput(Update update) {
        if (update.hasCallbackQuery()) {
            String data = update.getCallbackQuery().getData();
            log.info("ManualSpotState: –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '{}'", data);
            // –∑–¥–µ—Å—å –≤—ã –æ–±—ã—á–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ –≤—ã–±–æ—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –¥–∞–ª—å—à–µ
            return switch (data) {
                case "spot_pair_btc_usdt"     -> "spot_pair_btc_usdt";
                case "spot_pair_eth_usdt"     -> "spot_pair_eth_usdt";
                case "spot_pair_ada_usdt"     -> "spot_pair_ada_usdt";
                case "spot_order_market"      -> "spot_order_market";
                case "spot_order_limit"       -> "spot_order_limit";
                case "spot_action_buy"        -> "spot_action_buy";
                case "spot_action_sell"       -> "spot_action_sell";
                case "manual_trading_settings"-> "manual_trading_settings";
                default                        -> {
                    log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback '{}' –≤ Spot-–ø–æ–¥–º–µ–Ω—é, –æ—Å—Ç–∞—ë–º—Å—è", data);
                    yield name();
                }
            };
        }
        // –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Å—Ç–∞—ë–º—Å—è
        return name();
    }
}
