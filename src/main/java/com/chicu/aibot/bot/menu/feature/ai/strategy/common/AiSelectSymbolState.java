package com.chicu.aibot.bot.menu.feature.ai.strategy.common;

import com.chicu.aibot.bot.menu.core.MenuSessionService;
import com.chicu.aibot.bot.menu.core.MenuState;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;
import java.util.Map;

@Component
@RequiredArgsConstructor
public class AiSelectSymbolState implements MenuState {

    public static final String NAME = "ai_select_symbol";

    private final MenuSessionService sessionService;

    @Override
    public String name() {
        return NAME;
    }

    @Override
    public SendMessage render(Long chatId) {
        // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        String backState = sessionService.getReturnState(chatId);
        if (backState == null) backState = "ai_trading";

        String text = "*–í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª:";

        List<List<InlineKeyboardButton>> rows = List.of(
                List.of(
                        button("üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã", "symbol_popular"),
                        button("üìà –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–æ—Å—Ç", "symbol_gainers")
                ),
                List.of(
                        button("üìâ –¢–µ—Ä—è—é—Ç –≤ —Ü–µ–Ω–µ", "symbol_losers"),
                        button("üí∞ –ú–∞–∫—Å. –æ–±—ä–µ–º", "symbol_volume")
                ),
                List.of(
                        button("‚Äπ –ù–∞–∑–∞–¥", backState)
                )
        );

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .replyMarkup(InlineKeyboardMarkup.builder().keyboard(rows).build())
                .build();
    }

    @Override
    public String handleInput(Update update) {
        String data = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();

        // –ó–∞–≥–ª—É—à–∫–∏ ‚Äî –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        if (data.startsWith("symbol_")) {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞
            return NAME;
        }

        if (data.equals("ai_trading") || data.startsWith("ai_trading_")) {
            return data;
        }

        return NAME;
    }

    private InlineKeyboardButton button(String text, String data) {
        return InlineKeyboardButton.builder().text(text).callbackData(data).build();
    }
}
