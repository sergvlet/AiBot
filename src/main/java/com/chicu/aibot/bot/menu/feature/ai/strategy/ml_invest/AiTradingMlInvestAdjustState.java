package com.chicu.aibot.bot.menu.feature.ai.strategy.ml_invest;

import com.chicu.aibot.bot.menu.core.MenuSessionService;
import com.chicu.aibot.bot.menu.core.MenuState;
import com.chicu.aibot.strategy.ml_invest.model.MachineLearningInvestStrategySettings;
import com.chicu.aibot.strategy.ml_invest.service.MachineLearningInvestStrategySettingsService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.math.BigDecimal;
import java.util.*;

@Component(AiTradingMlInvestAdjustState.NAME)
@RequiredArgsConstructor
public class AiTradingMlInvestAdjustState implements MenuState {

    public static final String NAME = "ai_trading_ml_invest_adjust";

    private final MenuSessionService sessionService;
    private final MachineLearningInvestStrategySettingsService settingsService;

    @Override
    public String name() { return NAME; }

    @Override
    public SendMessage render(Long chatId) {
        if (chatId == null) {
            return SendMessage.builder().chatId("0").text("–û—à–∏–±–∫–∞: chatId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.").build();
        }

        MachineLearningInvestStrategySettings s = settingsService.getOrCreate(chatId);
        String field = sessionService.getEditingField(chatId);
        FieldMeta meta = fields().getOrDefault(field, new FieldMeta("–ü–∞—Ä–∞–º–µ—Ç—Ä", "‚Äî", null));

        String valueStr = switch (field) {
            case "timeframe"          -> nullSafe(s.getTimeframe());
            case "cachedCandlesLimit" -> String.valueOf(safeInt(s.getCachedCandlesLimit()));
            case "buyThreshold"       -> nullSafe(s.getBuyThreshold());
            case "sellThreshold"      -> nullSafe(s.getSellThreshold());
            case "tp_sl"              -> "TP=" + nullSafe(s.getTakeProfitPct()) + " / SL=" + nullSafe(s.getStopLossPct());
            case "modelPath"          -> nullSafe(s.getModelPath());
            case "orderQty"           -> nullSafe(s.getOrderQty());
            case "orderQuoteAmount"   -> nullSafe(s.getOrderQuoteAmount());
            case "volumeMode"         -> s.isUseQuoteAmount() ? "–ø–æ —Å—É–º–º–µ (Quote)" : "–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (Qty)";
            default                   -> "‚Äî";
        };

        String text = """
                üîß *%s*
                _%s_

                –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *%s*
                """.formatted(meta.label(), meta.description(), valueStr);

        InlineKeyboardMarkup kb = buildKb(field, s.isUseQuoteAmount());
        return SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(text)
                .parseMode("Markdown")
                .replyMarkup(kb)
                .build();
    }

    // –£–¥–æ–±–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞
    public SendMessage render(Update update) { return render(extractChatId(update)); }

    @Override
    public String handleInput(Update update) {
        if (update == null || !update.hasCallbackQuery()) return NAME;

        long chatId = update.getCallbackQuery().getMessage().getChatId();
        String data = update.getCallbackQuery().getData();

        MachineLearningInvestStrategySettings s = settingsService.getOrCreate(chatId);
        String field = sessionService.getEditingField(chatId);

        if ("back".equals(data)) return AiTradingMlInvestConfigState.NAME;

        if ("volumeMode".equals(field)) {
            if ("mode:qty".equals(data))   s.setUseQuoteAmount(false);
            if ("mode:quote".equals(data)) s.setUseQuoteAmount(true);
            settingsService.save(s);
            return NAME;
        }

        if ("timeframe".equals(field)) {
            if (data != null && data.startsWith("tf:")) {
                s.setTimeframe(data.substring(3));
                settingsService.save(s);
            }
            return NAME;
        }

        if ("modelPath".equals(field)) {
            if ("model:ask".equals(data)) return "ai_trading_ml_invest_help";
            return NAME;
        }

        switch (field) {
            case "cachedCandlesLimit" -> {
                int v = safeInt(s.getCachedCandlesLimit());
                if ("dec".equals(data)) v = clampInt(v - 50);
                if ("inc".equals(data)) v = clampInt(v + 50);
                s.setCachedCandlesLimit(v);
            }
            case "buyThreshold" -> {
                double v = s.getBuyThreshold() == null ? 0.60 : s.getBuyThreshold().doubleValue();
                if ("dec".equals(data)) v -= 0.05;
                if ("inc".equals(data)) v += 0.05;
                s.setBuyThreshold(clampDoubleToBigDecimal(v, 0.05, 0.99));
            }
            case "sellThreshold" -> {
                double v = s.getSellThreshold() == null ? 0.60 : s.getSellThreshold().doubleValue();
                if ("dec".equals(data)) v -= 0.05;
                if ("inc".equals(data)) v += 0.05;
                s.setSellThreshold(clampDoubleToBigDecimal(v, 0.05, 0.99));
            }
            case "tp_sl" -> {
                double tp = s.getTakeProfitPct() == null ? 0.0 : s.getTakeProfitPct().doubleValue();
                double sl = s.getStopLossPct()   == null ? 0.0 : s.getStopLossPct().doubleValue();
                if ("tp_dec".equals(data)) tp -= 0.1;
                if ("tp_inc".equals(data)) tp += 0.1;
                if ("sl_dec".equals(data)) sl -= 0.1;
                if ("sl_inc".equals(data)) sl += 0.1;
                s.setTakeProfitPct(clampDoubleToBigDecimal(tp, 0.0, 10_000.0));
                s.setStopLossPct(clampDoubleToBigDecimal(sl, 0.0, 10_000.0));
            }
            case "orderQty" -> {
                BigDecimal v = s.getOrderQty() == null ? BigDecimal.ZERO : s.getOrderQty();
                v = stepDecimal(v, data, new BigDecimal("0.001"), new BigDecimal("0.01"), new BigDecimal("0.1"));
                if (v.signum() < 0) v = BigDecimal.ZERO;
                s.setOrderQty(v);
                // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º:
                // s.setUseQuoteAmount(false);
            }
            case "orderQuoteAmount" -> {
                BigDecimal v = s.getOrderQuoteAmount() == null ? BigDecimal.ZERO : s.getOrderQuoteAmount();
                v = stepDecimal(v, data, new BigDecimal("1"), new BigDecimal("10"), new BigDecimal("100"));
                if (v.signum() < 0) v = BigDecimal.ZERO;
                s.setOrderQuoteAmount(v);
                // s.setUseQuoteAmount(true);
            }
            default -> { /* noop */ }
        }

        settingsService.save(s);
        return NAME;
    }

    /* ===== helpers ===== */

    private InlineKeyboardMarkup buildKb(String field, boolean useQuoteAmount) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        switch (field) {
            case "volumeMode" -> {
                String left  = useQuoteAmount ? "‚ñ´Ô∏è Qty (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)" : "üîò Qty (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)";
                String right = useQuoteAmount ? "üîò Quote (–ø–æ —Å—É–º–º–µ)"   : "‚ñ´Ô∏è Quote (–ø–æ —Å—É–º–º–µ)";
                rows.add(row(btn(left, "mode:qty"), btn(right, "mode:quote")));
            }
            case "timeframe" -> {
                rows.add(row(btn("1m", "tf:1m"), btn("5m", "tf:5m"), btn("15m", "tf:15m")));
                rows.add(row(btn("1h", "tf:1h"), btn("4h", "tf:4h"), btn("1d", "tf:1d")));
            }
            case "cachedCandlesLimit" -> rows.add(row(btn("‚ûñ 50", "dec"), btn("‚ûï 50", "inc")));
            case "buyThreshold", "sellThreshold" -> rows.add(row(btn("‚ûñ 0.05", "dec"), btn("‚ûï 0.05", "inc")));
            case "tp_sl" -> {
                rows.add(row(btn("TP ‚ûñ", "tp_dec"), btn("TP ‚ûï", "tp_inc")));
                rows.add(row(btn("SL ‚ûñ", "sl_dec"), btn("SL ‚ûñ", "sl_inc")));
            }
            case "modelPath" -> rows.add(row(btn("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏", "model:ask")));
            case "orderQty" -> {
                rows.add(row(btn("‚ûñ 0.001", "dec_small"), btn("‚ûñ 0.01", "dec_mid"), btn("‚ûñ 0.1", "dec_big")));
                rows.add(row(btn("‚ûï 0.001", "inc_small"), btn("‚ûï 0.01", "inc_mid"), btn("‚ûï 0.1", "inc_big")));
            }
            case "orderQuoteAmount" -> {
                rows.add(row(btn("‚ûñ 1", "dec_small"), btn("‚ûñ 10", "dec_mid"), btn("‚ûñ 100", "dec_big")));
                rows.add(row(btn("‚ûï 1", "inc_small"), btn("‚ûï 10", "inc_mid"), btn("‚ûï 100", "inc_big")));
            }
            default -> { /* nothing */ }
        }

        rows.add(row(btn("‚Äπ –ù–∞–∑–∞–¥", "back")));

        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        kb.setKeyboard(rows);
        return kb;
    }

    private Map<String, FieldMeta> fields() {
        Map<String, FieldMeta> m = new HashMap<>();
        m.put("volumeMode",         new FieldMeta("–†–µ–∂–∏–º –æ–±—ä—ë–º–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á—ë—Ç–∞ –æ–±—ä—ë–º–∞: Qty –∏–ª–∏ Quote", null));
        m.put("timeframe",          new FieldMeta("–¢–∞–π–º—Ñ—Ä–µ–π–º", "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π", null));
        m.put("cachedCandlesLimit", new FieldMeta("–°–≤–µ—á–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", null));
        m.put("buyThreshold",       new FieldMeta("–ü–æ—Ä–æ–≥ BUY", "–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ (0.05..0.99), —à–∞–≥ 0.05", 0.05));
        m.put("sellThreshold",      new FieldMeta("–ü–æ—Ä–æ–≥ SELL", "–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏ (0.05..0.99), —à–∞–≥ 0.05", 0.05));
        m.put("tp_sl",              new FieldMeta("TP / SL", "–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å, —à–∞–≥ 0.1", 0.1));
        m.put("modelPath",          new FieldMeta("–ú–æ–¥–µ–ª—å", "–ü—É—Ç—å –∫ ML-–º–æ–¥–µ–ª–∏ (.joblib/.onnx)", null));
        m.put("orderQty",           new FieldMeta("–§–∏–∫—Å. –æ–±—ä—ë–º (Qty)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –Ω–∞ —Å–¥–µ–ª–∫—É", 0.001));
        m.put("orderQuoteAmount",   new FieldMeta("–°—É–º–º–∞ (Quote)", "–°—É–º–º–∞ –≤ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ; qty —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ —Ü–µ–Ω–µ", 1.0));
        return m;
    }

    private InlineKeyboardButton btn(String t, String d) { var b = new InlineKeyboardButton(t); b.setCallbackData(d); return b; }
    private List<InlineKeyboardButton> row(InlineKeyboardButton... a) { return new ArrayList<>(List.of(a)); }

    private static int safeInt(Integer v) { return v == null ? 0 : v; }
    private static int clampInt(int v) { return Math.max(1, Math.min(10_000, v)); }
    private static BigDecimal clampDoubleToBigDecimal(double v, double min, double max) {
        return BigDecimal.valueOf(Math.max(min, Math.min(max, v)));
    }
    private static BigDecimal stepDecimal(BigDecimal base, String data, BigDecimal small, BigDecimal mid, BigDecimal big) {
        return switch (data) {
            case "dec_small" -> base.subtract(small);
            case "dec_mid"   -> base.subtract(mid);
            case "dec_big"   -> base.subtract(big);
            case "inc_small" -> base.add(small);
            case "inc_mid"   -> base.add(mid);
            case "inc_big"   -> base.add(big);
            default -> base;
        };
    }

    private String nullSafe(Object o) { return o == null ? "‚Äî" : String.valueOf(o); }

    private long extractChatId(Update u) {
        if (u != null) {
            if (u.hasCallbackQuery() && u.getCallbackQuery().getMessage() != null) {
                return u.getCallbackQuery().getMessage().getChatId();
            }
            if (u.hasMessage() && u.getMessage().getChatId() != null) {
                return u.getMessage().getChatId();
            }
        }
        return 0L;
    }

    private record FieldMeta(String label, String description, Double step) {}
}
