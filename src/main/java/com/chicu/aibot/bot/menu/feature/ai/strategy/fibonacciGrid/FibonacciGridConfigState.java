package com.chicu.aibot.bot.menu.feature.ai.strategy.fibonacciGrid;

import com.chicu.aibot.bot.menu.core.MenuSessionService;
import com.chicu.aibot.bot.menu.core.MenuState;
import com.chicu.aibot.strategy.fibonacci.model.FibonacciGridStrategySettings;
import com.chicu.aibot.strategy.fibonacci.service.FibonacciGridStrategySettingsService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

@Component
@RequiredArgsConstructor
public class FibonacciGridConfigState implements MenuState {
    public static final String NAME = "ai_trading_fibonacci_config";

    private final FibonacciGridStrategySettingsService service;
    private final MenuSessionService sessionService;

    @Override
    public String name() {
        return NAME;
    }

    @Override
    public SendMessage render(Long chatId) {
        FibonacciGridStrategySettings s = service.getOrCreate(chatId);

        String text =
                "*üî∂ Fibonacci Grid Strategy*\n\n" +
                        "–°–µ—Ç–æ—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —É—Ä–æ–≤–Ω—è–º –§–∏–±–æ–Ω–∞—á—á–∏.\n\n" +
                        "*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n" +
                        "‚Ä¢ –°–∏–º–≤–æ–ª: `" + s.getSymbol() + "` ‚Äî —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞\n" +
                        "‚Ä¢ –£—Ä–æ–≤–Ω–∏: `" + s.getLevels() + "` ‚Äî –∫—É–¥–∞ —Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä–∞\n" +
                        "‚Ä¢ –®–∞–≥: `" + String.format("%.2f", s.getGridSizePct()) + "%` ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏\n" +
                        "‚Ä¢ –û–±—ä–µ–º: `" + String.format("%.4f", s.getOrderVolume()) + "` ‚Äî —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞\n" +
                        "‚Ä¢ –ú–∞–∫—Å. –æ—Ä–¥–µ—Ä–æ–≤: `" + s.getMaxActiveOrders() + "` ‚Äî –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ\n" +
                        "‚Ä¢ TP: `" + String.format("%.2f", s.getTakeProfitPct()) + "%` ‚Äî –ø—Ä–æ—Ñ–∏—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã\n" +
                        "‚Ä¢ SL: `" + String.format("%.2f", s.getStopLossPct()) + "%` ‚Äî –∑–∞—â–∏—Ç–∞ –ø–æ –ø—Ä–æ—Å–∞–¥–∫–µ\n" +
                        "‚Ä¢ Short: `" + (s.getAllowShort() ? "‚úÖ" : "‚ùå") + "` ‚Ä¢ Long: `" + (s.getAllowLong() ? "‚úÖ" : "‚ùå") + "`\n" +
                        "‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `" + s.getTimeframe() + "` ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: `" + s.getCachedCandlesLimit() + "` —Å–≤–µ—á–µ–π\n";

        // –ö–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
        List<List<InlineKeyboardButton>> rows = List.of(
                List.of(
                        InlineKeyboardButton.builder().text("‚úèÔ∏è –°–∏–º–≤–æ–ª").callbackData("fibo_edit_symbol").build(),
                        InlineKeyboardButton.builder().text("‚úèÔ∏è –£—Ä–æ–≤–Ω–∏").callbackData("fibo_edit_levels").build(),
                        InlineKeyboardButton.builder().text("‚úèÔ∏è –®–∞–≥").callbackData("fibo_edit_gridSizePct").build()
                ),
                List.of(
                        InlineKeyboardButton.builder().text("‚úèÔ∏è –û–±—ä–µ–º").callbackData("fibo_edit_orderVolume").build(),
                        InlineKeyboardButton.builder().text("‚úèÔ∏è –ú–∞–∫—Å –æ—Ä–¥–µ—Ä—ã").callbackData("fibo_edit_maxActiveOrders").build(),
                        InlineKeyboardButton.builder().text("‚úèÔ∏è Take-Profit").callbackData("fibo_edit_takeProfitPct").build()
                ),
                List.of(
                        InlineKeyboardButton.builder().text("‚úèÔ∏è Stop-Loss").callbackData("fibo_edit_stopLossPct").build(),
                        InlineKeyboardButton.builder().text("‚öôÔ∏è Toggle Short").callbackData("fibo_edit_allowShort").build(),
                        InlineKeyboardButton.builder().text("‚öôÔ∏è Toggle Long").callbackData("fibo_edit_allowLong").build()
                ),
                List.of(
                        InlineKeyboardButton.builder().text("‚úèÔ∏è –¢–∞–π–º—Ñ—Ä–µ–π–º").callbackData("fibo_edit_timeframe").build(),
                        InlineKeyboardButton.builder().text("‚úèÔ∏è –ò—Å—Ç–æ—Ä–∏—è").callbackData("fibo_edit_cachedCandlesLimit").build(),
                        InlineKeyboardButton.builder().text("‚Äπ –ù–∞–∑–∞–¥").callbackData("ai_trading").build()
                )

        );

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .replyMarkup(InlineKeyboardMarkup.builder().keyboard(rows).build())
                .build();
    }

    @Override
    public String handleInput(Update update) {
        if (!update.hasCallbackQuery()) {
            return NAME;
        }
        String data = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();

        // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´‚úèÔ∏è ‚Ä¶¬ª –∏–ª–∏ ¬´‚öôÔ∏è ‚Ä¶¬ª ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ AdjustState
        if (data.startsWith("fibo_edit_")) {
            String field = data.substring("fibo_edit_".length());
            sessionService.setEditingField(chatId, field);
            return FibonacciGridAdjustState.NAME;
        }

        // ¬´‚Äπ –ù–∞–∑–∞–¥¬ª
        if ("ai_trading".equals(data)) {
            return "ai_trading";
        }

        // –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ ‚Äî –æ—Å—Ç–∞—ë–º—Å—è
        return NAME;
    }
}
