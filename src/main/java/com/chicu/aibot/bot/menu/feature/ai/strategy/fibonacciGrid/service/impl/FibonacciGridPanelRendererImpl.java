package com.chicu.aibot.bot.menu.feature.ai.strategy.fibonacciGrid.service.impl;

import com.chicu.aibot.bot.menu.feature.ai.strategy.fibonacciGrid.service.FibonacciGridPanelRenderer;
import com.chicu.aibot.bot.menu.feature.ai.strategy.scalping.service.ScalpingLiveService;
import com.chicu.aibot.bot.menu.feature.ai.strategy.view.LiveSnapshot;
import com.chicu.aibot.bot.ui.AdaptiveKeyboard;
import com.chicu.aibot.exchange.order.model.ExchangeOrderEntity;
import com.chicu.aibot.exchange.order.service.ExchangeOrderDbService;
import com.chicu.aibot.strategy.fibonacci.model.FibonacciGridStrategySettings;
import com.chicu.aibot.strategy.fibonacci.service.FibonacciGridStrategySettingsService;
import com.chicu.aibot.trading.trade.TradeLogService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

import static com.chicu.aibot.bot.menu.feature.ai.strategy.view.PanelTextUtils.*;

@Component
@RequiredArgsConstructor
public class FibonacciGridPanelRendererImpl implements FibonacciGridPanelRenderer {

    public static final String NAME               = "ai_trading_fibonacci_config";
    public static final String BTN_REFRESH        = "fib_refresh";
    public static final String BTN_EDIT_SYMBOL    = "fib_edit_symbol";
    public static final String BTN_TOGGLE_ACTIVE  = "fib_toggle_active";
    public static final String BTN_TOGGLE_LONG    = "fib_toggle_allow_long";
    public static final String BTN_TOGGLE_SHORT   = "fib_toggle_allow_short";
    public static final String BTN_EDIT_ORDER_VOL = "fib_edit_orderVolume";
    public static final String BTN_EDIT_GRID      = "fib_edit_gridSizePct";
    public static final String BTN_EDIT_MAX_ORD   = "fib_edit_maxActiveOrders";
    public static final String BTN_EDIT_TP        = "fib_edit_takeProfitPct";
    public static final String BTN_EDIT_SL        = "fib_edit_stopLossPct";
    public static final String BTN_EDIT_TF        = "fib_edit_timeframe";
    public static final String BTN_HELP           = "fib_help";

    private final FibonacciGridStrategySettingsService settingsService;
    private final ScalpingLiveService liveService;          // —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç –ø–æ —Å–∏–º–≤–æ–ª—É
    private final TradeLogService tradeLogService;
    private final ExchangeOrderDbService orderDb;

    @Override
    public SendMessage render(Long chatId) {
        FibonacciGridStrategySettings s = settingsService.getOrCreate(chatId);
        String symbol = nvl(s.getSymbol());

        LiveSnapshot live = liveService.build(chatId, symbol);

        // –æ–±—â–∏–π PnL-–±–ª–æ–∫ (—á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É)
        var lastTrade = tradeLogService.getLastTrade(chatId, symbol).orElse(null);
        String pnlBlock = buildPnlBlock(lastTrade, symbol, live);

        // –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ ‚Äî –æ–±—â–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        List<ExchangeOrderEntity> openOrders = orderDb.findOpenByChatAndSymbol(chatId, symbol);
        String openOrdersBlock = formatOpenOrdersBlock(openOrders);
        int openCount = openOrders.size();

        String text = ("""
                *üìä Fibonacci Grid Strategy*
                %s

                *–†—ã–Ω–æ–∫:* `%s`
                –ò–∑–º.: %s  |  –¶–µ–Ω–∞: `%s`

                *–ë–∞–ª–∞–Ω—Å:*
                ‚Ä¢ %s: `%s`
                ‚Ä¢ %s: `%s`

                *–°–¥–µ–ª–∫–∏ / PnL:*
                %s

                *–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (%d):*
                %s

                *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ –û–±—ä–µ–º: `%.4f`
                ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `%s`
                ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: `%d`
                ‚Ä¢ –®–∞–≥ —Å–µ—Ç–∫–∏: `%.4f%%`
                ‚Ä¢ –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: `%d`
                ‚Ä¢ LONG: %s ‚Ä¢ SHORT: %s
                ‚Ä¢ TP: `%.2f%%` ‚Ä¢ SL: `%.2f%%`
                ‚Ä¢ –°—Ç–∞—Ç—É—Å: *%s*
                """).stripTrailing().formatted(
                s.isActive() ? "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: üü¢ *–ó–∞–ø—É—â–µ–Ω–∞*" : "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: üî¥ *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*",

                symbol,
                live.getChangeStr(),
                live.getPriceStr(),

                live.getBase(),  live.getBaseBal(),
                live.getQuote(), live.getQuoteBal(),

                pnlBlock,

                openCount,
                openOrdersBlock,

                s.getOrderVolume(),
                s.getTimeframe(),
                s.getCachedCandlesLimit(),
                s.getGridSizePct(),
                s.getMaxActiveOrders(),
                boolEmoji(s.getAllowLong()), boolEmoji(s.getAllowShort()),
                s.getTakeProfitPct(),
                s.getStopLossPct(),
                s.isActive() ? "üü¢ –ó–∞–ø—É—â–µ–Ω–∞" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        );

        InlineKeyboardMarkup markup = buildKeyboard(s);

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .replyMarkup(markup)
                .build();
    }

    // ---------- UI helpers ----------

    private InlineKeyboardMarkup buildKeyboard(FibonacciGridStrategySettings s) {
        List<InlineKeyboardButton> g1 = List.of(
                btn("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", BTN_HELP),
                btn("‚è± –û–±–Ω–æ–≤–∏—Ç—å", BTN_REFRESH),
                btn("‚Äπ –ù–∞–∑–∞–¥", "ai_trading")
        );
        List<InlineKeyboardButton> g2 = List.of(
                btn("üéØ –°–∏–º–≤–æ–ª", BTN_EDIT_SYMBOL),
                btn("üí∞ –û–±—ä—ë–º, %", BTN_EDIT_ORDER_VOL),
                btn("üß± –®–∞–≥ —Å–µ—Ç–∫–∏, %", BTN_EDIT_GRID)
        );
        List<InlineKeyboardButton> g3 = List.of(
                btn("üìä –ú–∞–∫—Å. –æ—Ä–¥–µ—Ä–æ–≤", BTN_EDIT_MAX_ORD),
                btn("üéØ TP, %", BTN_EDIT_TP),
                btn("üõ° SL, %", BTN_EDIT_SL)
        );
        List<InlineKeyboardButton> g4 = List.of(
                btn("üìà LONG " + onOff(s.getAllowLong()), BTN_TOGGLE_LONG),
                btn("üìâ SHORT " + onOff(s.getAllowShort()), BTN_TOGGLE_SHORT),
                btn("‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º", BTN_EDIT_TF)
        );
        List<InlineKeyboardButton> g5 = List.of(
                btn("‚ñ∂Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –í–ö–õ/–í–´–ö–õ", BTN_TOGGLE_ACTIVE)
        );

        return AdaptiveKeyboard.markupFromGroups(List.of(g1, g2, g3, g4, g5));
    }

    private InlineKeyboardButton btn(String text, String data) {
        return InlineKeyboardButton.builder().text(text).callbackData(data).build();
    }
}
