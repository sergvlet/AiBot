package com.chicu.aibot.bot.menu.feature.ai.strategy.bollinger.service.impl;

import com.chicu.aibot.bot.menu.feature.ai.strategy.bollinger.service.BollingerPanelRenderer;
import com.chicu.aibot.bot.menu.feature.ai.strategy.view.LiveSnapshot;
import com.chicu.aibot.bot.ui.AdaptiveKeyboard;
import com.chicu.aibot.exchange.order.service.ExchangeOrderDbService;
import com.chicu.aibot.exchange.service.MarketLiveService;
import com.chicu.aibot.strategy.bollinger.model.BollingerStrategySettings;
import com.chicu.aibot.strategy.bollinger.service.BollingerStrategySettingsService;
import com.chicu.aibot.trading.trade.TradeLogService;
import com.chicu.aibot.trading.trade.model.TradeLogEntry;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;
import java.util.Optional;

import static com.chicu.aibot.bot.menu.feature.ai.strategy.view.PanelTextUtils.*;

@Component
@RequiredArgsConstructor
@Slf4j
public class BollingerPanelRendererImpl implements BollingerPanelRenderer {

    public static final String NAME               = "ai_trading_bollinger_config";
    public static final String BTN_REFRESH        = "boll_refresh";
    public static final String BTN_EDIT_SYMBOL    = "boll_edit_symbol";
    public static final String BTN_TOGGLE_ACTIVE  = "boll_toggle_active";
    public static final String BTN_TOGGLE_LONG    = "boll_toggle_allow_long";
    public static final String BTN_TOGGLE_SHORT   = "boll_toggle_allow_short";
    public static final String BTN_EDIT_ORDER_VOL = "boll_edit_orderVolume";
    public static final String BTN_EDIT_PERIOD    = "boll_edit_period";
    public static final String BTN_EDIT_STD       = "boll_edit_stdDevMultiplier";
    public static final String BTN_EDIT_TP        = "boll_edit_takeProfitPct";
    public static final String BTN_EDIT_SL        = "boll_edit_stopLossPct";
    public static final String BTN_EDIT_TF        = "boll_edit_timeframe";
    public static final String BTN_EDIT_HISTORY   = "boll_edit_cachedCandlesLimit";
    public static final String BTN_HELP           = "ai_trading_bollinger_help";

    private final BollingerStrategySettingsService settingsService;
    private final TradeLogService tradeLogService;
    private final ExchangeOrderDbService orderDb;
    private final MarketLiveService liveService;

    @Override
    public SendMessage render(Long chatId) {
        BollingerStrategySettings s = settingsService.getOrCreate(chatId);
        String symbol = nvl(s.getSymbol());

        LiveSnapshot live = liveService.build(chatId, symbol);

        // ===== –°–¥–µ–ª–∫–∏ / PnL =====
        Optional<TradeLogEntry> lastTradeOpt = tradeLogService.getLastTrade(chatId, symbol);
        String pnlBlock = lastTradeOpt
                .map(last -> buildPnlBlock(last, symbol, live))
                .orElse("_–Ω–µ—Ç —Å–¥–µ–ª–æ–∫_");

        double totalPnl = tradeLogService.getTotalPnl(chatId, symbol).orElse(0.0);

        // ===== –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ =====
        var openOrders = orderDb.findOpenByChatAndSymbol(chatId, symbol);
        String openOrdersBlock = formatOpenOrdersBlock(openOrders);

        // ===== –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç =====
        String text = ("""
        *üìä Bollinger Bands Strategy*
        –°—Ç–∞—Ç—É—Å: %s

        *–†—ã–Ω–æ–∫:* `%s`
        %s –ò–∑–º.: %s | üíµ –¶–µ–Ω–∞: `%s`

        *–ë–∞–ª–∞–Ω—Å:*
        ‚ö° %s: `%s`
        üíµ %s: `%s`

        *–°–¥–µ–ª–∫–∏ / PnL:*
        %s
        üí∞ –í—Å–µ–≥–æ PnL: %+.2f USDT

        *–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (%d):*
        %s

        *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
        ‚Ä¢ –û–±—ä–µ–º: `%.4f`
        ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `%s`
        ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: `%d`
        ‚Ä¢ SMA –ø–µ—Ä–∏–æ–¥: `%d`
        ‚Ä¢ –ö–æ—ç—Ñ. œÉ: `%.2f`
        ‚Ä¢ LONG: %s ‚Ä¢ SHORT: %s
        ‚Ä¢ TP: `%.2f%%` ‚Ä¢ SL: `%.2f%%`
        """).stripTrailing().formatted(
                s.isActive() ? "üü¢ *–ó–∞–ø—É—â–µ–Ω–∞*" : "üî¥ *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*",

                symbol,
                live.getChangePct() >= 0 ? "üìà" : "üìâ",
                live.getChangeStr(),
                live.getPriceStr(),

                live.getBase(),  live.getBaseBal(),
                live.getQuote(), live.getQuoteBal(),

                pnlBlock,
                totalPnl,

                openOrders.size(),
                openOrdersBlock,

                s.getOrderVolume(),
                s.getTimeframe(),
                s.getCachedCandlesLimit(),
                s.getPeriod(),
                s.getStdDevMultiplier(),
                boolEmoji(s.getAllowLong()), boolEmoji(s.getAllowShort()),
                s.getTakeProfitPct(),
                s.getStopLossPct()
        );

        // ===== –ö–Ω–æ–ø–∫–∏ =====
        List<InlineKeyboardButton> g1 = List.of(
                AdaptiveKeyboard.btn("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", BTN_HELP),
                AdaptiveKeyboard.btn("‚è± –û–±–Ω–æ–≤–∏—Ç—å", BTN_REFRESH),
                AdaptiveKeyboard.btn("‚Äπ –ù–∞–∑–∞–¥", "ai_trading")
        );
        List<InlineKeyboardButton> g2 = List.of(
                AdaptiveKeyboard.btn("üéØ –°–∏–º–≤–æ–ª", BTN_EDIT_SYMBOL),
                AdaptiveKeyboard.btn("üí∞ –û–±—ä—ë–º %", BTN_EDIT_ORDER_VOL),
                AdaptiveKeyboard.btn("‚è± –¢–§", BTN_EDIT_TF),
                AdaptiveKeyboard.btn("üìã –ò—Å—Ç–æ—Ä–∏—è", BTN_EDIT_HISTORY)
        );
        List<InlineKeyboardButton> g3 = List.of(
                AdaptiveKeyboard.btn("üìê SMA", BTN_EDIT_PERIOD),
                AdaptiveKeyboard.btn("–ö–æ—ç—Ñ. œÉ", BTN_EDIT_STD)
        );
        List<InlineKeyboardButton> g4 = List.of(
                AdaptiveKeyboard.btn("üìà LONG " + onOff(s.getAllowLong()),  BTN_TOGGLE_LONG),
                AdaptiveKeyboard.btn("üìâ SHORT " + onOff(s.getAllowShort()), BTN_TOGGLE_SHORT),
                AdaptiveKeyboard.btn("üéØ TP %", BTN_EDIT_TP),
                AdaptiveKeyboard.btn("üõ° SL %", BTN_EDIT_SL)
        );
        List<InlineKeyboardButton> g5 = List.of(
                AdaptiveKeyboard.btn(s.isActive() ? "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é" : "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", BTN_TOGGLE_ACTIVE)
        );

        InlineKeyboardMarkup markup = AdaptiveKeyboard.markupFromGroups(List.of(g1, g2, g3, g4, g5), 3);

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .replyMarkup(markup)
                .build();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª–∏ Bollinger.
     */
    public boolean handleCallback(Long chatId, String data) {
        BollingerStrategySettings s = settingsService.getOrCreate(chatId);

        switch (data) {
            case BTN_TOGGLE_LONG -> {
                s.setAllowLong(!s.getAllowLong());
                settingsService.save(s);
                log.info("LONG —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: {}", s.getAllowLong());
                return true;
            }
            case BTN_TOGGLE_SHORT -> {
                s.setAllowShort(!s.getAllowShort());
                settingsService.save(s);
                log.info("SHORT —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: {}", s.getAllowShort());
                return true;
            }
            case BTN_TOGGLE_ACTIVE -> {
                s.setActive(!s.isActive());
                settingsService.save(s);
                log.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞: {}", s.isActive());
                return true;
            }
            default -> {
                return false;
            }
        }
    }
}
