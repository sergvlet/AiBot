package com.chicu.aibot.bot.menu.feature.ai.strategy.bollinger.service.impl;

import com.chicu.aibot.bot.menu.feature.ai.strategy.bollinger.service.BollingerPanelRenderer;
import com.chicu.aibot.bot.menu.feature.ai.strategy.view.LiveSnapshot;
import com.chicu.aibot.bot.ui.AdaptiveKeyboard;
import com.chicu.aibot.exchange.order.service.ExchangeOrderDbService;
import com.chicu.aibot.exchange.service.MarketLiveService;
import com.chicu.aibot.strategy.bollinger.model.BollingerStrategySettings;
import com.chicu.aibot.strategy.bollinger.service.BollingerStrategySettingsService;
import com.chicu.aibot.trading.trade.TradeLogService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

import static com.chicu.aibot.bot.menu.feature.ai.strategy.view.PanelTextUtils.*;

@Component
@RequiredArgsConstructor
public class BollingerPanelRendererImpl implements BollingerPanelRenderer {

    public static final String NAME               = "ai_trading_bollinger_config";
    public static final String BTN_REFRESH        = "boll_refresh";
    public static final String BTN_EDIT_SYMBOL    = "boll_edit_symbol";
    public static final String BTN_TOGGLE_ACTIVE  = "boll_toggle_active";
    public static final String BTN_TOGGLE_LONG    = "boll_toggle_allow_long";
    public static final String BTN_TOGGLE_SHORT   = "boll_toggle_allow_short";
    public static final String BTN_EDIT_ORDER_VOL = "boll_edit_orderVolume";
    public static final String BTN_EDIT_PERIOD    = "boll_edit_period";
    public static final String BTN_EDIT_STD       = "boll_edit_stdDevMultiplier";
    public static final String BTN_EDIT_TP        = "boll_edit_takeProfitPct";
    public static final String BTN_EDIT_SL        = "boll_edit_stopLossPct";
    public static final String BTN_EDIT_TF        = "boll_edit_timeframe";
    public static final String BTN_EDIT_HISTORY   = "boll_edit_cachedCandlesLimit";
    public static final String BTN_HELP           = "ai_trading_bollinger_help";

    private final BollingerStrategySettingsService settingsService;
    private final TradeLogService tradeLogService;
    private final ExchangeOrderDbService orderDb;
    private final MarketLiveService liveService;

    @Override
    public SendMessage render(Long chatId) {
        BollingerStrategySettings s = settingsService.getOrCreate(chatId);
        String symbol = nvl(s.getSymbol());

        LiveSnapshot live = liveService.build(chatId, symbol);
        String pnlBlock   = buildPnlBlock(tradeLogService.getLastTrade(chatId, symbol).orElse(null), symbol, live);

        var openOrders = orderDb.findOpenByChatAndSymbol(chatId, symbol);
        String openOrdersBlock = formatOpenOrdersBlock(openOrders);
        int openCount = openOrders.size();

        String text = ("""
                *üìä Bollinger Bands Strategy*
                %s

                *–†—ã–Ω–æ–∫:* `%s`
                –ò–∑–º.: %s  |  –¶–µ–Ω–∞: `%s`

                *–ë–∞–ª–∞–Ω—Å:*
                ‚Ä¢ %s: `%s`
                ‚Ä¢ %s: `%s`

                *–°–¥–µ–ª–∫–∏ / PnL:*
                %s

                *–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (%d):*
                %s

                *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ –û–±—ä–µ–º: `%.4f`
                ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `%s`
                ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: `%d`
                ‚Ä¢ –ü–µ—Ä–∏–æ–¥ SMA: `%d`
                ‚Ä¢ –ö–æ—ç—Ñ. œÉ: `%.2f`
                ‚Ä¢ LONG: %s ‚Ä¢ SHORT: %s
                ‚Ä¢ TP: `%.2f%%` ‚Ä¢ SL: `%.2f%%`
                ‚Ä¢ –°—Ç–∞—Ç—É—Å: *%s*
                """).stripTrailing().formatted(
                s.isActive() ? "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: üü¢ *–ó–∞–ø—É—â–µ–Ω–∞*" : "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: üî¥ *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*",

                symbol,
                live.getChangeStr(),
                live.getPriceStr(),

                live.getBase(),  live.getBaseBal(),
                live.getQuote(), live.getQuoteBal(),

                pnlBlock,

                openCount,
                openOrdersBlock,

                s.getOrderVolume(),
                s.getTimeframe(),
                s.getCachedCandlesLimit(),
                s.getPeriod(),
                s.getStdDevMultiplier(),
                boolEmoji(s.getAllowLong()), boolEmoji(s.getAllowShort()),
                s.getTakeProfitPct(),
                s.getStopLossPct(),
                s.isActive() ? "üü¢ –ó–∞–ø—É—â–µ–Ω–∞" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        );

        // –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ + –∂—ë—Å—Ç–∫–æ 2 –≤ —Ä—è–¥ (–∞–¥–∞–ø—Ç–∏–≤ –æ–ø—É—Å—Ç–∏—Ç –¥–æ 1 –ø—Ä–∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö)
        List<InlineKeyboardButton> g1 = List.of(
                AdaptiveKeyboard.btn("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", BTN_HELP),
                AdaptiveKeyboard.btn("‚è± –û–±–Ω–æ–≤–∏—Ç—å", BTN_REFRESH),
                AdaptiveKeyboard.btn("‚Äπ –ù–∞–∑–∞–¥", "ai_trading")
        );
        List<InlineKeyboardButton> g2 = List.of(
                AdaptiveKeyboard.btn("üéØ –°–∏–º–≤–æ–ª", BTN_EDIT_SYMBOL),
                AdaptiveKeyboard.btn("üí∞ –û–±—ä—ë–º %", BTN_EDIT_ORDER_VOL),
                AdaptiveKeyboard.btn("‚è± –¢–§", BTN_EDIT_TF),
                AdaptiveKeyboard.btn("üìã –ò—Å—Ç–æ—Ä–∏—è", BTN_EDIT_HISTORY)
        );
        List<InlineKeyboardButton> g3 = List.of(
                AdaptiveKeyboard.btn("üìê SMA", BTN_EDIT_PERIOD),
                AdaptiveKeyboard.btn("–ö–æ—ç—Ñ. œÉ", BTN_EDIT_STD)        );
        List<InlineKeyboardButton> g4 = List.of(
                AdaptiveKeyboard.btn("üìà LONG " + onOff(s.getAllowLong()),  BTN_TOGGLE_LONG),
                AdaptiveKeyboard.btn("üìâ SHORT " + onOff(s.getAllowShort()), BTN_TOGGLE_SHORT),
                AdaptiveKeyboard.btn("üéØ TP %", BTN_EDIT_TP),
                AdaptiveKeyboard.btn("üõ° SL %", BTN_EDIT_SL)
        );
        List<InlineKeyboardButton> g5 = List.of(
                AdaptiveKeyboard.btn("‚ñ∂Ô∏è –í–ö–õ/–í–´–ö–õ", BTN_TOGGLE_ACTIVE)
        );

        InlineKeyboardMarkup markup = AdaptiveKeyboard.markupFromGroups(List.of(g1, g2, g3, g4, g5), 3);

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .replyMarkup(markup)
                .build();
    }
}
