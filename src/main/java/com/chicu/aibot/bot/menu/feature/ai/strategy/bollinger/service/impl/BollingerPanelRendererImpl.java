package com.chicu.aibot.bot.menu.feature.ai.strategy.bollinger.service.impl;

import com.chicu.aibot.bot.menu.feature.ai.strategy.bollinger.service.BollingerPanelRenderer;
import com.chicu.aibot.bot.menu.feature.ai.strategy.view.LiveSnapshot;
import com.chicu.aibot.bot.ui.AdaptiveKeyboard;
import com.chicu.aibot.exchange.order.service.ExchangeOrderDbService;
import com.chicu.aibot.exchange.service.MarketLiveService;
import com.chicu.aibot.strategy.bollinger.model.BollingerStrategySettings;
import com.chicu.aibot.strategy.bollinger.service.BollingerStrategySettingsService;
import com.chicu.aibot.trading.trade.TradeLogService;
import com.chicu.aibot.trading.trade.model.TradeLogEntry;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.util.List;
import java.util.Optional;

import static com.chicu.aibot.bot.menu.feature.ai.strategy.view.PanelTextUtils.*;

@Component
@RequiredArgsConstructor
public class BollingerPanelRendererImpl implements BollingerPanelRenderer {

    public static final String NAME                = "ai_trading_bollinger_config";
    public static final String BTN_REFRESH         = "boll_refresh";
    public static final String BTN_EDIT_SYMBOL     = "boll_edit_symbol";
    public static final String BTN_TOGGLE_ACTIVE   = "boll_toggle_active";
    public static final String BTN_TOGGLE_LONG     = "boll_toggle_allow_long";
    public static final String BTN_TOGGLE_SHORT    = "boll_toggle_allow_short";
    public static final String BTN_EDIT_ORDER_VOL  = "boll_edit_orderVolume";
    public static final String BTN_EDIT_PERIOD     = "boll_edit_period";
    public static final String BTN_EDIT_STD        = "boll_edit_stdDevMultiplier";
    public static final String BTN_EDIT_TP         = "boll_edit_takeProfitPct";
    public static final String BTN_EDIT_SL         = "boll_edit_stopLossPct";
    public static final String BTN_EDIT_TF         = "boll_edit_timeframe";
    public static final String BTN_EDIT_HISTORY    = "boll_edit_cachedCandlesLimit";
    public static final String BTN_HELP            = "ai_trading_bollinger_help";

    // –ù–æ–≤—ã–µ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏ –±–µ–∑ –º—É—Å–æ—Ä–∞ –∏–∑ 10+ –∫–Ω–æ–ø–æ–∫
    public static final String BTN_CANCEL_NEAREST  = "boll_cancel_nearest";
    public static final String BTN_CANCEL_ALL      = "boll_cancel_all";

    private final BollingerStrategySettingsService settingsService;
    private final TradeLogService tradeLogService;
    private final ExchangeOrderDbService orderDb;
    private final MarketLiveService liveService;

    @Override
    public SendMessage render(Long chatId) {
        BollingerStrategySettings s = settingsService.getOrCreate(chatId);
        String symbol = nvl(s.getSymbol());
        LiveSnapshot live = liveService.build(chatId, symbol);

        Optional<TradeLogEntry> lastTradeOpt = tradeLogService.getLastTrade(chatId, symbol);
        String pnlBlock = lastTradeOpt.map(last -> buildPnlBlock(last, symbol, live)).orElse("_–Ω–µ—Ç —Å–¥–µ–ª–æ–∫_");
        String totalPnlBlock = formatTotalPnl(tradeLogService.getTotalPnl(chatId, symbol));

        var openOrders = orderDb.findOpenByChatAndSymbol(chatId, symbol);
        String openOrdersBlock = formatOpenOrdersBlock(openOrders);

        String text = ("""
                *üìä Bollinger Bands Strategy*
                –°—Ç–∞—Ç—É—Å: %s

                *–†—ã–Ω–æ–∫:* `%s`
                %s –ò–∑–º.: %s | üíµ –¶–µ–Ω–∞: `%s`

                *–ë–∞–ª–∞–Ω—Å:*
                ‚ö° %s: `%s`
                üíµ %s: `%s`

                *–°–¥–µ–ª–∫–∏ / PnL:*
                %s
                %s

                *–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (%d):*
                %s

                *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ –û–±—ä–µ–º: `%.4f`
                ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `%s`
                ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: `%d`
                ‚Ä¢ SMA –ø–µ—Ä–∏–æ–¥: `%d`
                ‚Ä¢ –ö–æ—ç—Ñ. œÉ: `%.2f`
                ‚Ä¢ LONG: %s ‚Ä¢ SHORT: %s
                ‚Ä¢ TP: `%.2f%%` ‚Ä¢ SL: `%.2f%%`
                """).stripTrailing().formatted(
                s.isActive() ? "üü¢ *–ó–∞–ø—É—â–µ–Ω–∞*" : "üî¥ *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*",
                symbol,
                (live.getChangePct() >= 0 ? "üìà" : "üìâ"),
                nvl(live.getChangeStr()),
                nvl(live.getPriceStr()),
                nvl(live.getBase()), nvl(live.getBaseBal()),
                nvl(live.getQuote()), nvl(live.getQuoteBal()),
                pnlBlock,
                totalPnlBlock,
                openOrders.size(),
                openOrdersBlock,
                safeD(s.getOrderVolume()),
                nvl(s.getTimeframe()),
                safeI(s.getCachedCandlesLimit()),
                safeI(s.getPeriod()),
                safeD(s.getStdDevMultiplier()),
                boolEmoji(s.getAllowLong()), boolEmoji(s.getAllowShort()),
                safeD(s.getTakeProfitPct()),
                safeD(s.getStopLossPct())
        );

        // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞: –º–∞–∫—Å–∏–º—É–º 3 –≤ —Ä—è–¥, –±–µ–∑ 10+ ¬´–∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä ‚Ä¶¬ª
        InlineKeyboardMarkup markup = AdaptiveKeyboard.markupFromGroups(List.of(
                // 1 —Ä—è–¥
                List.of(
                        AdaptiveKeyboard.btn("‚Äπ –ù–∞–∑–∞–¥", "ai_trading"),
                        AdaptiveKeyboard.btn("‚è± –û–±–Ω–æ–≤–∏—Ç—å", BTN_REFRESH),
                        AdaptiveKeyboard.btn("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", BTN_HELP)
                ),
                // 2 —Ä—è–¥ ‚Äî –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
                List.of(
                        AdaptiveKeyboard.btn("üéØ –°–∏–º–≤–æ–ª", BTN_EDIT_SYMBOL),
                        AdaptiveKeyboard.btn("‚è± –¢–§", BTN_EDIT_TF),
                        AdaptiveKeyboard.btn("üìã –ò—Å—Ç–æ—Ä–∏—è", BTN_EDIT_HISTORY)
                ),
                // 3 —Ä—è–¥ ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                List.of(
                        AdaptiveKeyboard.btn("üìê SMA", BTN_EDIT_PERIOD),
                        AdaptiveKeyboard.btn("œÉ", BTN_EDIT_STD),
                        AdaptiveKeyboard.btn("üí∞ –û–±—ä—ë–º %", BTN_EDIT_ORDER_VOL)
                ),
                // 4 —Ä—è–¥ ‚Äî —Ä–∏—Å–∫–∏
                List.of(
                        AdaptiveKeyboard.btn("üéØ TP %", BTN_EDIT_TP),
                        AdaptiveKeyboard.btn("üõ° SL %", BTN_EDIT_SL)
                ),
                // 5 —Ä—è–¥ ‚Äî –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                List.of(
                        AdaptiveKeyboard.btn("üìà LONG " + onOff(s.getAllowLong()), BTN_TOGGLE_LONG),
                        AdaptiveKeyboard.btn("üìâ SHORT " + onOff(s.getAllowShort()), BTN_TOGGLE_SHORT)
                ),
                // 6 —Ä—è–¥ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏
                List.of(
                        AdaptiveKeyboard.btn("‚ùå –ë–ª–∏–∂–∞–π—à–∏–π –æ—Ä–¥–µ—Ä", BTN_CANCEL_NEAREST),
                        AdaptiveKeyboard.btn("üßπ –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", BTN_CANCEL_ALL)
                ),
                // 7 —Ä—è–¥ ‚Äî —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø
                List.of(
                        AdaptiveKeyboard.btn(s.isActive() ? "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é" : "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", BTN_TOGGLE_ACTIVE)
                )
        ), 3);

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .replyMarkup(markup)
                .build();
    }

    /* –ª–æ–∫–∞–ª—å–Ω—ã–µ ¬´–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ¬ª –≥–µ—Ç—Ç–µ—Ä—ã –Ω–∞ —Å–ª—É—á–∞–π null */
    private static int safeI(Integer v) { return v == null ? 0 : v; }
    private static double safeD(Double v) { return v == null ? 0d : v; }
}
