package com.chicu.aibot.bot.menu.feature.ai.strategy.fibonacci.service.impl;

import com.chicu.aibot.bot.menu.feature.ai.strategy.fibonacci.service.FibonacciGridPanelRenderer;
import com.chicu.aibot.bot.menu.feature.ai.strategy.view.LiveSnapshot;
import com.chicu.aibot.bot.ui.AdaptiveKeyboard;
import com.chicu.aibot.exchange.order.model.ExchangeOrderEntity;
import com.chicu.aibot.exchange.order.service.ExchangeOrderDbService;
import com.chicu.aibot.exchange.service.MarketLiveService;
import com.chicu.aibot.strategy.fibonacci.model.FibonacciGridStrategySettings;
import com.chicu.aibot.strategy.fibonacci.service.FibonacciGridStrategySettingsService;
import com.chicu.aibot.trading.trade.TradeLogService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;

import static com.chicu.aibot.bot.menu.feature.ai.strategy.view.PanelTextUtils.boolEmoji;
import static com.chicu.aibot.bot.menu.feature.ai.strategy.view.PanelTextUtils.nvl;

@Component
@RequiredArgsConstructor
public class FibonacciGridPanelRendererImpl implements FibonacciGridPanelRenderer {

    public static final String NAME               = "ai_trading_fibonacci_config";
    public static final String BTN_REFRESH        = "fib_refresh";
    public static final String BTN_EDIT_SYMBOL    = "fib_edit_symbol";
    public static final String BTN_TOGGLE_ACTIVE  = "fib_toggle_active";
    public static final String BTN_TOGGLE_LONG    = "fib_toggle_allow_long";
    public static final String BTN_TOGGLE_SHORT   = "fib_toggle_allow_short";
    public static final String BTN_EDIT_ORDER_VOL = "fib_edit_orderVolume";
    public static final String BTN_EDIT_GRID      = "fib_edit_gridSizePct";
    public static final String BTN_EDIT_MAX_ORD   = "fib_edit_maxActiveOrders";
    public static final String BTN_EDIT_TP        = "fib_edit_takeProfitPct";
    public static final String BTN_EDIT_SL        = "fib_edit_stopLossPct";
    public static final String BTN_EDIT_TF        = "fib_edit_timeframe";
    public static final String BTN_HELP           = "fib_help";

    private final FibonacciGridStrategySettingsService settingsService;
    private final MarketLiveService liveService;
    private final TradeLogService tradeLogService;
    private final ExchangeOrderDbService orderDb;

    @Override
    public SendMessage render(Long chatId) {
        FibonacciGridStrategySettings s = settingsService.getOrCreate(chatId);
        String symbol = nvl(s.getSymbol());
        LiveSnapshot live = liveService.build(chatId, symbol);

        // Total PnL (–∏–∑ TradeLogService), –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        String totalPnlBlock = tradeLogService.getTotalPnl(chatId, symbol)
                .map(this::formatSignedPercent)
                .map(v -> "*–ò—Ç–æ–≥–æ–≤—ã–π PnL:* `" + v + "`")
                .orElse("_–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ PnL_");

        // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ ¬´–ï—Å—Ç—å/–ù–µ—Ç¬ª, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –ø–æ–ª–µ–π TradeLogEntry
        String lastTradeBlock = tradeLogService.getLastTrade(chatId, symbol).isPresent()
                ? "–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: `–µ—Å—Ç—å`"
                : "_–Ω–µ—Ç —Å–¥–µ–ª–æ–∫_";

        List<ExchangeOrderEntity> openOrders = orderDb.findOpenByChatAndSymbol(chatId, symbol);
        String openOrdersBlock = formatOpenOrdersBlock(openOrders);

        String text = ("""
                *üìä Fibonacci Grid Strategy*
                %s

                *–†—ã–Ω–æ–∫:* `%s`
                %s –ò–∑–º.: %s | üíµ –¶–µ–Ω–∞: `%s`

                *–ë–∞–ª–∞–Ω—Å:*
                ‚Ä¢ %s: `%s`
                ‚Ä¢ %s: `%s`

                *–°–¥–µ–ª–∫–∏ / PnL:*
                %s
                %s

                *–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (%d):*
                %s

                *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ –û–±—ä–µ–º: `%.4f`
                ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: `%s`
                ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: `%d`
                ‚Ä¢ –®–∞–≥ —Å–µ—Ç–∫–∏: `%.4f%%`
                ‚Ä¢ –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: `%d`
                ‚Ä¢ LONG: %s ‚Ä¢ SHORT: %s
                ‚Ä¢ TP: `%.2f%%` ‚Ä¢ SL: `%.2f%%`
                ‚Ä¢ –°—Ç–∞—Ç—É—Å: *%s*
                """).formatted(
                s.isActive() ? "üü¢ *–ó–∞–ø—É—â–µ–Ω–∞*" : "üî¥ *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*",
                symbol,
                live.getChangePct() >= 0 ? "üìà" : "üìâ",
                live.getChangeStr(),
                live.getPriceStr(),
                live.getBase(), live.getBaseBal(),
                live.getQuote(), live.getQuoteBal(),
                lastTradeBlock,
                totalPnlBlock,
                openOrders.size(),
                openOrdersBlock,
                s.getOrderVolume(),
                s.getTimeframe(),
                s.getCachedCandlesLimit(),
                s.getGridSizePct(),
                s.getMaxActiveOrders(),
                boolEmoji(s.getAllowLong()), boolEmoji(s.getAllowShort()),
                s.getTakeProfitPct(),
                s.getStopLossPct(),
                s.isActive() ? "üü¢ –ó–∞–ø—É—â–µ–Ω–∞" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        ).stripTrailing();

        InlineKeyboardMarkup markup = AdaptiveKeyboard.markupFromGroups(List.of(
                List.of(
                        AdaptiveKeyboard.btn("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", BTN_HELP),
                        AdaptiveKeyboard.btn("‚è± –û–±–Ω–æ–≤–∏—Ç—å", BTN_REFRESH),
                        AdaptiveKeyboard.btn("‚Äπ –ù–∞–∑–∞–¥", "ai_trading")
                ),
                List.of(
                        AdaptiveKeyboard.btn("üéØ –°–∏–º–≤–æ–ª", BTN_EDIT_SYMBOL),
                        AdaptiveKeyboard.btn("üí∞ –û–±—ä—ë–º %", BTN_EDIT_ORDER_VOL),
                        AdaptiveKeyboard.btn("üß± –®–∞–≥ %", BTN_EDIT_GRID),
                        AdaptiveKeyboard.btn("üìä –ú–∞–∫—Å. –æ—Ä–¥.", BTN_EDIT_MAX_ORD)
                ),
                List.of(
                        AdaptiveKeyboard.btn("üìà LONG " + onOff(s.getAllowLong()), BTN_TOGGLE_LONG),
                        AdaptiveKeyboard.btn("üìâ SHORT " + onOff(s.getAllowShort()), BTN_TOGGLE_SHORT),
                        AdaptiveKeyboard.btn("üéØ TP %", BTN_EDIT_TP),
                        AdaptiveKeyboard.btn("üõ° SL %", BTN_EDIT_SL),
                        AdaptiveKeyboard.btn("‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º", BTN_EDIT_TF)
                ),
                List.of(
                        AdaptiveKeyboard.btn(s.isActive() ? "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" : "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å", BTN_TOGGLE_ACTIVE)
                )
        ), 3);

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .replyMarkup(markup)
                .build();
    }

    private String onOff(Boolean b) {
        return Boolean.TRUE.equals(b) ? "ON" : "OFF";
    }

    private String formatSignedPercent(double v) {
        // –õ–æ–∫–∞–ª—å RU –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, –Ω–æ –±–µ–∑ deprecated –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
        NumberFormat nf = NumberFormat.getNumberInstance(Locale.forLanguageTag("ru-RU"));
        nf.setMinimumFractionDigits(2);
        nf.setMaximumFractionDigits(2);
        String num = nf.format(Math.abs(v));
        return (v >= 0 ? "+" : "‚àí") + num + "%";
    }

    private String formatOpenOrdersBlock(List<ExchangeOrderEntity> list) {
        if (list == null || list.isEmpty()) return "_–Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤_";
        StringBuilder sb = new StringBuilder();
        for (ExchangeOrderEntity o : list) {
            sb.append("‚Ä¢ ")
              .append(o.getSide()).append(" ").append(o.getType())
              .append(" qty `").append(nvl(String.valueOf(o.getQuantity()))).append('`')
              .append(" @ `").append(nvl(String.valueOf(o.getPrice()))).append('`')
              .append(" filled `").append(nvl(String.valueOf(o.getExecutedQty()))).append('`')
              .append(" *").append(o.getStatus()).append("* ")
              .append("(#").append(nvl(o.getOrderId())).append(")\n");
        }
        return sb.toString().stripTrailing();
    }
}
