package com.chicu.aibot.bot.menu.feature.ai.strategy.scalping;

import com.chicu.aibot.bot.menu.core.MenuSessionService;
import com.chicu.aibot.bot.menu.core.MenuState;
import com.chicu.aibot.bot.menu.feature.common.AiSelectSymbolState;
import com.chicu.aibot.strategy.scalping.model.ScalpingStrategySettings;
import com.chicu.aibot.strategy.scalping.service.ScalpingStrategySettingsService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

@Component
@RequiredArgsConstructor
public class ScalpingHelpState implements MenuState {

    public static final String NAME = "ai_trading_scalping_help";

    private static final String BTN_BACK_CONFIG   = ScalpingConfigState.NAME;
    private static final String BTN_TO_SYMBOL     = "scalp_help_goto_symbol";
    private static final String BTN_PRESET_CONS   = "scalp_help_preset_conservative";
    private static final String BTN_PRESET_BAL    = "scalp_help_preset_balanced";
    private static final String BTN_PRESET_AGG    = "scalp_help_preset_aggressive";
    private static final String BTN_RESET_DEFAULT = "scalp_help_reset_defaults";

    private final ScalpingStrategySettingsService settingsService;
    private final MenuSessionService sessionService;

    @Override public String name() { return NAME; }

    @Override
    public SendMessage render(Long chatId) {
        String text = """
                *‚ÑπÔ∏è Scalping ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –∏ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã*

                –ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–ø—É–ª—å—Å—ã —Ü–µ–Ω—ã –∏ –≤—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ *Œî–¶–µ–Ω—ã (%)*, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—è *–º–∞–∫—Å. —Å–ø—Ä–µ–¥ (%)*.\s
                –í—ã—Ö–æ–¥ ‚Äî –ø–æ *TP (%)* –∏–ª–∏ *SL (%)*. –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç *–û–∫–Ω–æ* (—à–∏—Ä–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–≤–µ—á–∞—Ö) –∏ *–ò—Å—Ç–æ—Ä–∏—è* (–≥–ª—É–±–∏–Ω–∞ –∫—ç—à–∞ —Å–≤–µ—á–µ–π).
               \s
                *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ *üéØ –°–∏–º–≤–æ–ª* ‚Äî —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (ETHUSDT –∏ —Ç.–ø.)
                ‚Ä¢ *üí∞ –û–±—ä—ë–º —Å–¥–µ–ª–∫–∏* ‚Äî —Ä–∞–∑–º–µ—Ä —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                ‚Ä¢ *‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º* ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏/–ø–µ—Ä–µ—Å—á—ë—Ç–∞ (–æ—Ç 1s –∏ –≤—ã—à–µ)
                ‚Ä¢ *–ò—Å—Ç–æ—Ä–∏—è* ‚Äî —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –¥–µ—Ä–∂–∞—Ç—å –≤ –∫—ç—à–µ
                ‚Ä¢ *ü™ü –û–∫–Ω–æ* ‚Äî —Ä–∞–∑–º–µ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
                ‚Ä¢ *Œî–¶–µ–Ω—ã (%)* ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å –¥–ª—è –≤—Ö–æ–¥–∞
                ‚Ä¢ *–ú–∞–∫—Å. —Å–ø—Ä–µ–¥ (%)* ‚Äî —Ñ–∏–ª—å—Ç—Ä –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                ‚Ä¢ *TP/SL (%)* ‚Äî —Ü–µ–ª–∏ –≤—ã—Ö–æ–¥–∞
                               \s
                *–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:*
                ‚Ä¢ *Conservative* ‚Äî –º–µ–Ω—å—à–µ –≤—Ö–æ–¥–æ–≤, –º—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã (–¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞)
                ‚Ä¢ *Balanced* ‚Äî —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —á–∞—Å—Ç–æ—Ç–µ/—Ä–∏—Å–∫—É (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–∞–∫ —Å—Ç–∞—Ä—Ç)
                ‚Ä¢ *Aggressive* ‚Äî –±–æ–ª—å—à–µ –≤—Ö–æ–¥–æ–≤, –≤—ã—à–µ —Ä–∏—Å–∫ (–¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞)
               \s""";

        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                .keyboardRow(List.of(
                        btn("üß© Conservative", BTN_PRESET_CONS),
                        btn("‚öñÔ∏è Balanced",    BTN_PRESET_BAL),
                        btn("üî• Aggressive",  BTN_PRESET_AGG)
                ))
                .keyboardRow(List.of(
                        btn("‚Ü©Ô∏è –°–±—Ä–æ—Å –∫ —É–º–æ–ª—á–∞–Ω–∏—é", BTN_RESET_DEFAULT)
                ))
                .keyboardRow(List.of(
                        btn("üéØ –í—ã–±—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª‚Ä¶", BTN_TO_SYMBOL)
                ))
                .keyboardRow(List.of(
                        btn("‚Äπ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", BTN_BACK_CONFIG)
                ))
                .build();

        return SendMessage.builder()
                .chatId(chatId.toString())
                .parseMode("Markdown")
                .disableWebPagePreview(true)
                .text(text)
                .replyMarkup(markup)
                .build();
    }

    @Override
    public String handleInput(Update update) {
        if (update == null || !update.hasCallbackQuery()) return NAME;

        String data  = update.getCallbackQuery().getData();
        Long chatId  = update.getCallbackQuery().getMessage().getChatId();

        if (BTN_BACK_CONFIG.equals(data)) {
            return ScalpingConfigState.NAME;
        }
        if (BTN_TO_SYMBOL.equals(data)) {
            sessionService.setEditingField(chatId, "symbol");
            sessionService.setReturnState(chatId, ScalpingConfigState.NAME);
            return AiSelectSymbolState.NAME;
        }

        // –ü—Ä–µ—Å–µ—Ç—ã/—Å–±—Ä–æ—Å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –°–†–ê–ó–£ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (BTN_PRESET_CONS.equals(data)) {
            applyPreset(chatId, Preset.CONSERVATIVE);
            return ScalpingConfigState.NAME;
        }
        if (BTN_PRESET_BAL.equals(data)) {
            applyPreset(chatId, Preset.BALANCED);
            return ScalpingConfigState.NAME;
        }
        if (BTN_PRESET_AGG.equals(data)) {
            applyPreset(chatId, Preset.AGGRESSIVE);
            return ScalpingConfigState.NAME;
        }
        if (BTN_RESET_DEFAULT.equals(data)) {
            resetDefaults(chatId);
            return ScalpingConfigState.NAME;
        }

        return NAME;
    }

    // ===== helpers =====

    private InlineKeyboardButton btn(String text, String data) {
        return InlineKeyboardButton.builder().text(text).callbackData(data).build();
    }

    private enum Preset { CONSERVATIVE, BALANCED, AGGRESSIVE }

    private void applyPreset(Long chatId, Preset p) {
        ScalpingStrategySettings s = settingsService.getOrCreate(chatId);
        switch (p) {
            case CONSERVATIVE -> {
                s.setOrderVolume(0.50);   // –º–µ–Ω—å—à–∏–π –æ–±—ä—ë–º
                s.setTimeframe("3s");
                s.setCachedCandlesLimit(720);
                s.setWindowSize(150);
                s.setPriceChangeThreshold(0.50); // –≤—ã—à–µ –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞
                s.setSpreadThreshold(0.08);
                s.setTakeProfitPct(0.80);
                s.setStopLossPct(0.50);
            }
            case BALANCED -> {
                s.setOrderVolume(1.00);
                s.setTimeframe("1s");
                s.setCachedCandlesLimit(720);
                s.setWindowSize(120);
                s.setPriceChangeThreshold(0.40);
                s.setSpreadThreshold(0.10);
                s.setTakeProfitPct(1.00);
                s.setStopLossPct(0.50);
            }
            case AGGRESSIVE -> {
                s.setOrderVolume(1.20);
                s.setTimeframe("1s");
                s.setCachedCandlesLimit(520);
                s.setWindowSize(80);
                s.setPriceChangeThreshold(0.25); // —á–∞—â–µ –≤—Ö–æ–¥—ã
                s.setSpreadThreshold(0.15);
                s.setTakeProfitPct(0.80);
                s.setStopLossPct(0.60);
            }
        }
        settingsService.save(s);
    }

    private void resetDefaults(Long chatId) {
        // —Ç–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ –æ–±—ã—á–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –ø–∞–Ω–µ–ª–∏
        ScalpingStrategySettings s = settingsService.getOrCreate(chatId);
        s.setOrderVolume(1.00);
        s.setTimeframe("1s");
        s.setCachedCandlesLimit(520);
        s.setWindowSize(50);
        s.setPriceChangeThreshold(0.10);
        s.setSpreadThreshold(0.22);
        s.setTakeProfitPct(1.00);
        s.setStopLossPct(0.50);
        settingsService.save(s);
    }
}
