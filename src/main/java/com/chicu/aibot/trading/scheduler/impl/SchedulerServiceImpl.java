package com.chicu.aibot.trading.scheduler.impl;

import com.chicu.aibot.bot.TelegramBot;
import com.chicu.aibot.bot.menu.core.MenuSessionService;
import com.chicu.aibot.bot.menu.feature.ai.strategy.bollinger.BollingerConfigState;
import com.chicu.aibot.bot.menu.feature.ai.strategy.bollinger.service.BollingerPanelRenderer;
import com.chicu.aibot.bot.menu.feature.ai.strategy.fibonacci.FibonacciGridConfigState;
import com.chicu.aibot.bot.menu.feature.ai.strategy.fibonacci.service.FibonacciGridPanelRenderer;
import com.chicu.aibot.bot.menu.feature.ai.strategy.ml_invest.AiTradingMlInvestConfigState;                // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
import com.chicu.aibot.bot.menu.feature.ai.strategy.ml_invest.service.MlInvestPanelRenderer;              // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
import com.chicu.aibot.bot.menu.feature.ai.strategy.scalping.ScalpingConfigState;
import com.chicu.aibot.bot.menu.feature.ai.strategy.scalping.service.ScalpingPanelRenderer;
import com.chicu.aibot.strategy.StrategyRegistry;
import com.chicu.aibot.strategy.TradingStrategy;
import com.chicu.aibot.strategy.bollinger.model.BollingerStrategySettings;
import com.chicu.aibot.strategy.bollinger.repository.BollingerStrategySettingsRepository;
import com.chicu.aibot.strategy.fibonacci.model.FibonacciGridStrategySettings;
import com.chicu.aibot.strategy.fibonacci.repository.FibonacciGridStrategySettingsRepository;
import com.chicu.aibot.strategy.ml_invest.model.MachineLearningInvestStrategySettings;                      // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
import com.chicu.aibot.strategy.ml_invest.repository.MachineLearningInvestStrategySettingsRepository;     // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
import com.chicu.aibot.strategy.scalping.model.ScalpingStrategySettings;
import com.chicu.aibot.strategy.scalping.repository.ScalpingStrategySettingsRepository;
import com.chicu.aibot.trading.scheduler.SchedulerService;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;

import java.lang.reflect.Method;
import java.time.Duration;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Stream;

@Slf4j
@Service
@RequiredArgsConstructor
public class SchedulerServiceImpl implements SchedulerService {

    private final StrategyRegistry registry;

    // —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    private final ScalpingStrategySettingsRepository scalpingRepo;
    private final FibonacciGridStrategySettingsRepository fibRepo;
    private final BollingerStrategySettingsRepository bollRepo;
    private final MachineLearningInvestStrategySettingsRepository mlRepo; // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ

    // –ø–∞–Ω–µ–ª–∏
    private final ObjectProvider<ScalpingPanelRenderer> scalpingPanel;
    private final ObjectProvider<FibonacciGridPanelRenderer> fibPanel;
    private final ObjectProvider<BollingerPanelRenderer> bollPanel;
    private final ObjectProvider<MlInvestPanelRenderer> mlPanel;         // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ

    private final ObjectProvider<TelegramBot> botProvider;
    private final MenuSessionService sessionService;

    @Value("${ui.autorefresh.ms:1000}")
    private long uiAutorefreshMs;

    @Value("${trading.autostart:false}")
    private boolean tradingAutostart;

    private ScheduledThreadPoolExecutor scheduler;
    private final Map<String, ScheduledFuture<?>> runningTasks = new ConcurrentHashMap<>();
    private ScheduledFuture<?> uiRefreshFuture;

    private final Set<String> uiAutorefreshDisabled = ConcurrentHashMap.newKeySet();
    private final Map<String, String> lastUiPayload = new ConcurrentHashMap<>();

    private static final AtomicLong SCHEDULER_THREAD_SEQ = new AtomicLong();

    /** –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –ø–æ –∏–º–µ–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. */
    private final Map<String, Function<Long, String>> timeframeResolvers = new HashMap<>();

    /** –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ chatId‚Äô–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞. */
    private final Map<String, Supplier<Stream<Long>>> autostartSuppliers = new HashMap<>();

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ UI-–ø–∞–Ω–µ–ª–∏ (—Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞) –∏ –∏–º–µ–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     */
    private record UiMeta(String stateName, Supplier<Optional<? extends PanelRendererAdapter>> renderer) { }
    /** –ù–µ–±–æ–ª—å—à–æ–π –∞–¥–∞–ø—Ç–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–æ–≤. */
    public interface PanelRendererAdapter {
        SendMessage render(Long chatId);
    }

    private final Map<String, UiMeta> uiByStrategy = new HashMap<>();

    @PostConstruct
    private void init() {
        int threads = Math.max(2, Runtime.getRuntime().availableProcessors());
        this.scheduler = new ScheduledThreadPoolExecutor(threads, r -> {
            Thread t = new Thread(r);
            t.setName("ai-scheduler-" + SCHEDULER_THREAD_SEQ.incrementAndGet());
            t.setDaemon(true);
            return t;
        });
        this.scheduler.setRemoveOnCancelPolicy(true);
        log.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {} –ø–æ—Ç–æ–∫(–∞/–æ–≤)", threads);

        // -------- —Ä–µ–∑–æ–ª–≤–µ—Ä—ã —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ ----------
        timeframeResolvers.put("SCALPING", id ->
                scalpingRepo.findById(id).orElseThrow(() ->
                        new IllegalStateException("Scalping settings not found for chatId=" + id)).getTimeframe()
        );
        timeframeResolvers.put("FIBONACCI_GRID", id ->
                fibRepo.findById(id).orElseThrow(() ->
                        new IllegalStateException("FibonacciGrid settings not found for chatId=" + id)).getTimeframe()
        );
        timeframeResolvers.put("BOLLINGER_BANDS", id ->
                bollRepo.findById(id).orElseThrow(() ->
                        new IllegalStateException("Bollinger settings not found for chatId=" + id)).getTimeframe()
        );
        timeframeResolvers.put("MACHINE_LEARNING_INVEST", id ->                                          // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
                mlRepo.findById(id).orElseThrow(() ->
                        new IllegalStateException("ML-Invest settings not found for chatId=" + id)).getTimeframe()
        );

        // -------- –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ –ë–î ----------
        autostartSuppliers.put("SCALPING", () ->
                scalpingRepo.findAll().stream().filter(ScalpingStrategySettings::isActive).map(ScalpingStrategySettings::getChatId));
        autostartSuppliers.put("FIBONACCI_GRID", () ->
                fibRepo.findAll().stream().filter(FibonacciGridStrategySettings::isActive).map(FibonacciGridStrategySettings::getChatId));
        autostartSuppliers.put("BOLLINGER_BANDS", () ->
                bollRepo.findAll().stream().filter(BollingerStrategySettings::isActive).map(BollingerStrategySettings::getChatId));
        autostartSuppliers.put("MACHINE_LEARNING_INVEST", () ->                                          // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
                mlRepo.findAll().stream().filter(MachineLearningInvestStrategySettings::isActive).map(MachineLearningInvestStrategySettings::getChatId));

        // ---- UI-–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ----
        uiByStrategy.put("SCALPING",
                new UiMeta(ScalpingConfigState.NAME,
                        () -> scalpingPanel.stream().findFirst().map(p -> p::render)));
        uiByStrategy.put("FIBONACCI_GRID",
                new UiMeta(FibonacciGridConfigState.NAME,
                        () -> fibPanel.stream().findFirst().map(p -> p::render)));
        uiByStrategy.put("BOLLINGER_BANDS",
                new UiMeta(BollingerConfigState.NAME,
                        () -> bollPanel.stream().findFirst().map(p -> p::render)));
        uiByStrategy.put("MACHINE_LEARNING_INVEST",                                                       // üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
                new UiMeta(AiTradingMlInvestConfigState.NAME,
                        () -> mlPanel.stream().findFirst().map(p -> p::render)));

        startUiAutorefreshIfNeeded();
        startActiveFromDbIfEnabled();
    }

    @PreDestroy
    private void shutdown() {
        log.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫‚Ä¶");
        if (uiRefreshFuture != null) uiRefreshFuture.cancel(true);
        scheduler.shutdownNow();
        lastUiPayload.clear();
    }

    // ==================== API ====================

    @Override
    public void startStrategy(Long chatId, String strategyName) {
        String key = buildKey(chatId, strategyName);

        ScheduledFuture<?> existing = runningTasks.get(key);
        if (existing != null && (existing.isCancelled() || existing.isDone())) {
            runningTasks.remove(key);
            existing = null;
        }
        if (existing != null) {
            log.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è {} —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è chatId={}", strategyName, chatId);
            return;
        }

        long intervalSec = Math.max(1, resolveIntervalSec(chatId, strategyName));
        TradingStrategy strategy = registry.getStrategyOrThrow(strategyName);

        try {
            strategy.start(chatId);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ start() —É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {} @{}: {}", strategyName, chatId, e.getMessage(), e);
            throw e;
        }

        ScheduledFuture<?> future = scheduleLoop(chatId, strategyName, strategy, intervalSec);
        runningTasks.put(key, future);
        log.info("–ó–∞–ø—É—â–µ–Ω–∞ {} –¥–ª—è chatId={} (–∏–Ω—Ç–µ—Ä–≤–∞–ª={}s)", strategyName, chatId, intervalSec);
    }

    @Override
    public void stopStrategy(Long chatId, String strategyName) {
        String key = buildKey(chatId, strategyName);
        ScheduledFuture<?> future = runningTasks.remove(key);

        if (future == null || future.isCancelled() || future.isDone()) {
            log.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è {} –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è chatId={}; –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ", strategyName, chatId);
            return;
        }

        future.cancel(true);
        try {
            registry.getStrategyOrThrow(strategyName).stop(chatId);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ stop() —É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {} @{}: {}", strategyName, chatId, e.getMessage(), e);
        }
        log.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {} –¥–ª—è chatId={}", strategyName, chatId);
    }

    public void restartStrategy(Long chatId, String strategyName) {
        String key = buildKey(chatId, strategyName);
        TradingStrategy strategy = registry.getStrategyOrThrow(strategyName);

        ScheduledFuture<?> old = runningTasks.remove(key);
        if (old != null && !old.isCancelled() && !old.isDone()) {
            old.cancel(true);
            try {
                strategy.stop(chatId);
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ stop() –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ {} @{}: {}", strategyName, chatId, e.getMessage(), e);
            }
            log.info("–°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ {} –¥–ª—è chatId={} –æ—Ç–º–µ–Ω–µ–Ω–∞", strategyName, chatId);
        } else {
            log.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è {} –¥–ª—è chatId={} –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∫–∞–∫ –Ω–æ–≤—É—é", strategyName, chatId);
        }

        long intervalSec = Math.max(1, resolveIntervalSec(chatId, strategyName));
        try {
            strategy.start(chatId);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ start() –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ {} @{}: {}", strategyName, chatId, e.getMessage(), e);
            throw e;
        }

        ScheduledFuture<?> future = scheduleLoop(chatId, strategyName, strategy, intervalSec);
        runningTasks.put(key, future);
        log.info("–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ {} –¥–ª—è chatId={} (–∏–Ω—Ç–µ—Ä–≤–∞–ª={}s)", strategyName, chatId, intervalSec);
    }

    @Override
    public boolean isStrategyActive(Long chatId, String strategyName) {
        String key = buildKey(chatId, strategyName);
        ScheduledFuture<?> f = runningTasks.get(key);
        return f != null && !f.isDone() && !f.isCancelled();
    }

    public void setUiAutorefreshEnabled(Long chatId, String strategyName, boolean enabled) {
        String key = buildKey(chatId, strategyName);
        if (enabled) {
            uiAutorefreshDisabled.remove(key);
            log.debug("UI –∞–≤—Çorefresh –≤–∫–ª—é—á—ë–Ω –¥–ª—è {}", key);
        } else {
            uiAutorefreshDisabled.add(key);
            log.debug("UI –∞–≤—Çorefresh –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è {}", key);
        }
    }

    // ==================== –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ====================

    private ScheduledFuture<?> scheduleLoop(Long chatId, String strategyName, TradingStrategy strategy, long intervalSec) {
        return scheduler.scheduleAtFixedRate(() -> {
            try {
                double price = strategy.getCurrentPrice(chatId);
                strategy.onPriceUpdate(chatId, price);
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ onPriceUpdate –¥–ª—è {} @{}: {}", strategyName, chatId, e.getMessage(), e);
            }
        }, 0, intervalSec, TimeUnit.SECONDS);
    }

    private long resolveIntervalSec(Long chatId, String strategyName) {
        Function<Long, String> resolver = timeframeResolvers.get(strategyName);
        if (resolver == null) {
            throw new IllegalArgumentException("Unknown strategy: " + strategyName);
        }
        String tf = resolver.apply(chatId);
        return parseTimeframe(tf);
    }

    private long parseTimeframe(String tfRaw) {
        if (tfRaw == null || tfRaw.isBlank()) {
            throw new IllegalArgumentException("–ü—É—Å—Ç–æ–π timeframe");
        }
        String tf = tfRaw.trim().toLowerCase();
        char unit = tf.charAt(tf.length() - 1);
        String num = tf.substring(0, tf.length() - 1);
        long value;
        try {
            value = Long.parseLong(num);
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤ timeframe: " + tfRaw, e);
        }
        return switch (unit) {
            case 's' -> Duration.ofSeconds(value).getSeconds();
            case 'm' -> Duration.ofMinutes(value).getSeconds();
            case 'h' -> Duration.ofHours(value).getSeconds();
            case 'd' -> Duration.ofDays(value).getSeconds();
            default -> throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ timeframe '" + unit + "' –≤ " + tfRaw);
        };
    }

    private String buildKey(Long chatId, String strategyName) {
        return chatId + ":" + strategyName;
    }

    // ===== UI autorefresh –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ =====

    private void startUiAutorefreshIfNeeded() {
        if (uiAutorefreshMs <= 0) {
            log.info("UI –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ (ui.autorefresh.ms={})", uiAutorefreshMs);
            return;
        }
        if (uiRefreshFuture == null || uiRefreshFuture.isCancelled() || uiRefreshFuture.isDone()) {
            uiRefreshFuture = scheduler.scheduleAtFixedRate(
                    this::refreshPanelsSafe,
                    uiAutorefreshMs,
                    uiAutorefreshMs,
                    TimeUnit.MILLISECONDS
            );
            log.info("UI –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –∫–∞–∂–¥—ã–µ {} –º—Å", uiAutorefreshMs);
        }
    }

    private void refreshPanelsSafe() {
        try {
            refreshPanels();
        } catch (Exception e) {
            log.debug("UI autorefresh tick failed: {}", e.getMessage());
        }
    }

    private void refreshPanels() {
        if (runningTasks.isEmpty()) return;

        Set<String> keys = Set.copyOf(runningTasks.keySet());
        for (String key : keys) {
            // key = "<chatId>:<STRATEGY_NAME>"
            int idx = key.indexOf(':');
            if (idx <= 0) continue;

            String strategyName = key.substring(idx + 1);
            UiMeta meta = uiByStrategy.get(strategyName);
            if (meta == null) continue;

            if (uiAutorefreshDisabled.contains(key)) continue;

            Long chatId = extractChatId(key);
            if (chatId == null) continue;

            String currentState = tryGetCurrentState(chatId);
            if (!Objects.equals(meta.stateName, currentState)) continue;

            Integer messageId = tryGetLastMessageId(chatId);
            if (messageId == null) continue;

            Optional<? extends PanelRendererAdapter> rendererOpt = meta.renderer.get();
            if (rendererOpt.isEmpty()) continue;

            try {
                SendMessage sm = rendererOpt.get().render(chatId);

                EditMessageText edit = EditMessageText.builder()
                        .chatId(chatId.toString())
                        .messageId(messageId)
                        .text(sm.getText())
                        .parseMode(sm.getParseMode())
                        .disableWebPagePreview(Boolean.TRUE.equals(sm.getDisableWebPagePreview()))
                        .replyMarkup((InlineKeyboardMarkup) sm.getReplyMarkup())
                        .build();

                TelegramBot bot = botProvider.getIfAvailable();
                if (bot != null) {
                    safeEdit(bot, edit);
                }
            } catch (Exception e) {
                log.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å UI –¥–ª—è chatId={}: {}", chatId, e.getMessage());
            }
        }
    }

    /** –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç edit —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è. –ì–∞—Å–∏—Ç ¬´message is not modified¬ª. */
    private void safeEdit(TelegramBot bot, EditMessageText edit) {
        String chatId = edit.getChatId();
        Integer messageId = edit.getMessageId();
        String key = chatId + ":" + messageId;

        String payload = buildPayload(
                edit.getText(),
                edit.getReplyMarkup(),
                edit.getParseMode(),
                edit.getDisableWebPagePreview()
        );

        String prev = lastUiPayload.put(key, payload);
        if (payload.equals(prev)) {
            return;
        }
        try {
            bot.execute(edit);
        } catch (TelegramApiRequestException e) {
            String resp = e.getApiResponse();
            if (resp != null && resp.contains("message is not modified")) {
                log.debug("UI: –ø—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) chatId={}, msgId={}", chatId, messageId);
                return;
            }
            throw new RuntimeException(e);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private String buildPayload(String text,
                                InlineKeyboardMarkup markup,
                                String parseMode,
                                Boolean disablePreview) {
        return (text == null ? "" : text) + '|'
               + (parseMode == null ? "" : parseMode) + '|'
               + Boolean.TRUE.equals(disablePreview) + '|'
               + (markup == null ? "null" : markup.toString());
    }

    private Long extractChatId(String key) {
        int idx = key.indexOf(':');
        if (idx <= 0) return null;
        try {
            return Long.parseLong(key.substring(0, idx));
        } catch (NumberFormatException ignored) {
            return null;
        }
    }

    private String tryGetCurrentState(Long chatId) {
        try {
            Method m = sessionService.getClass().getMethod("getCurrentState", Long.class);
            Object r = m.invoke(sessionService, chatId);
            return r == null ? null : r.toString();
        } catch (Exception ignored) {
            return null;
        }
    }

    private Integer tryGetLastMessageId(Long chatId) {
        for (String name : new String[]{"getLastMessageId", "getLastBotMessageId", "getMessageId"}) {
            try {
                Method m = sessionService.getClass().getMethod(name, Long.class);
                Object r = m.invoke(sessionService, chatId);
                if (r instanceof Integer i) return i;
                if (r instanceof Number n) return n.intValue();
            } catch (NoSuchMethodException ignore) {
                // –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∏–º—è
            } catch (Exception e) {
                log.debug("–î–æ—Å—Ç—É–ø –∫ {} —á–µ—Ä–µ–∑ {} –Ω–µ —É–¥–∞–ª—Å—è: {}", sessionService.getClass().getSimpleName(), name, e.getMessage());
            }
        }
        return null;
    }

    private void startActiveFromDbIfEnabled() {
        if (!tradingAutostart) {
            log.info("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ—Ç–∫–ª—é—á—ë–Ω (trading.autostart=false). –ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º.");
            return;
        }
        autostartSuppliers.forEach((name, supplier) -> {
            try {
                supplier.get().forEach(chatId -> safeStart(chatId, name));
            } catch (Exception e) {
                log.error("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ {}: –æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö ‚Äî {}", name, e.getMessage());
            }
        });
    }

    private void safeStart(Long chatId, String name) {
        try {
            startStrategy(chatId, name);
        } catch (Exception e) {
            log.error("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ {} @{} –ø—Ä–æ–≤–∞–ª–µ–Ω: {}", name, chatId, e.getMessage());
        }
    }
}
