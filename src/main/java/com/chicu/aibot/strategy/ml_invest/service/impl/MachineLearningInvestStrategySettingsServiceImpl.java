package com.chicu.aibot.strategy.ml_invest.service.impl;

import com.chicu.aibot.strategy.ml_invest.model.MachineLearningInvestStrategySettings;
import com.chicu.aibot.strategy.ml_invest.repository.MachineLearningInvestStrategySettingsRepository;
import com.chicu.aibot.strategy.ml_invest.service.MachineLearningInvestStrategySettingsService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Optional;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Machine Learning Invest.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã).
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class MachineLearningInvestStrategySettingsServiceImpl implements MachineLearningInvestStrategySettingsService {

    private final MachineLearningInvestStrategySettingsRepository repository;

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –≤–µ—Ä–Ω—É—Ç—å null.
     */
    @Override
    @Transactional(readOnly = true)
    public MachineLearningInvestStrategySettings get(Long chatId) {
        return repository.findByChatId(chatId).orElse(null);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ chatId —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
     */
    @Override
    @Transactional
    public MachineLearningInvestStrategySettings getOrCreate(Long chatId) {
        return repository.findByChatId(chatId)
                .orElseGet(() -> {
                    MachineLearningInvestStrategySettings s = MachineLearningInvestStrategySettings.builder()
                            .chatId(chatId)
                            .symbol("BTCUSDT")
                            .modelPath("python_ml/ml_invest/toy_model/model.pkl")
                            .quota(java.math.BigDecimal.valueOf(100))
                            .maxTradesPerQuota(5)
                            .trainingWindowDays(30)
                            .universeSize(20)
                            .min24hQuoteVolume(java.math.BigDecimal.valueOf(1_000_000))
                            .timeframe("1h")
                            .tradeTopN(5)
                            .useAtrTpSl(false)
                            .autoRetrainOnStart(true)
                            .cachedCandlesLimit(500)
                            .buyThreshold(java.math.BigDecimal.valueOf(0.55))
                            .sellThreshold(java.math.BigDecimal.valueOf(0.55))
                            .takeProfitPct(java.math.BigDecimal.valueOf(2.0))
                            .stopLossPct(java.math.BigDecimal.valueOf(1.0))
                            .orderQty(java.math.BigDecimal.valueOf(0.001))
                            .orderQuoteAmount(java.math.BigDecimal.valueOf(10))
                            .useQuoteAmount(true)
                            .active(false)
                            // ‚úÖ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            .selectedPairs(new ArrayList<>())
                            .build();

                    // ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ selectedPairs
                    s.getSelectedPairs().add(s.getSymbol());

                    MachineLearningInvestStrategySettings saved = repository.save(s);
                    log.info("[ML-Invest] ‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è chatId={}, symbol={}", chatId, s.getSymbol());
                    return saved;
                });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
     */
    @Override
    @Transactional
    public MachineLearningInvestStrategySettings save(MachineLearningInvestStrategySettings settings) {
        // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ selectedPairs –Ω–µ null
        if (settings.getSelectedPairs() == null) {
            settings.setSelectedPairs(new ArrayList<>());
        }

        // ‚úÖ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π symbol ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ selectedPairs
        if (settings.getSymbol() != null &&
            !settings.getSymbol().isBlank() &&
            !settings.getSelectedPairs().contains(settings.getSymbol())) {
            settings.getSelectedPairs().add(settings.getSymbol());
            log.info("[ML-Invest] üîó –î–æ–±–∞–≤–ª–µ–Ω —Å–∏–º–≤–æ–ª '{}' –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä chatId={}",
                    settings.getSymbol(), settings.getChatId());
        }

        MachineLearningInvestStrategySettings saved = repository.save(settings);
        log.debug("[ML-Invest] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ chatId={} symbol={} pairs={}",
                settings.getChatId(),
                settings.getSymbol(),
                settings.getSelectedPairs().size());
        return saved;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä maxTradesPerQuota.
     */
    @Override
    @Transactional
    public MachineLearningInvestStrategySettings updateMaxTrades(Long chatId, Integer maxTrades) {
        MachineLearningInvestStrategySettings settings = repository.findByChatId(chatId)
                .orElseThrow(() -> new IllegalStateException(
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ML-Invest –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è chatId=" + chatId));

        settings.setMaxTradesPerQuota(maxTrades);
        MachineLearningInvestStrategySettings updated = repository.save(settings);

        log.info("[ML-Invest] üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–æ maxTradesPerQuota={} –¥–ª—è chatId={}", maxTrades, chatId);
        return updated;
    }

    /**
     * –ù–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ chatId (Optional).
     */
    @Override
    @Transactional(readOnly = true)
    public Optional<MachineLearningInvestStrategySettings> findByChatId(Long chatId) {
        return repository.findByChatId(chatId);
    }
}
