package com.chicu.aibot.python.impl;

import com.chicu.aibot.python.PythonInferenceService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Duration;
import java.util.*;
import java.util.stream.Collectors;

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Python –¥–ª—è ML Invest:
 * - –æ–±—É—á–µ–Ω–∏–µ (train)
 * - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (predict)
 *
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
 * 1) –ë–æ–ª—å—à–µ –ù–ï —Å–æ–∑–¥–∞—ë—Ç "–∑–∞–≥–ª—É—à–∫—É" ml_model.joblib (–ª–æ–º–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ –≤ Python).
 * 2) –ï—Å–ª–∏ train –≤–µ—Ä–Ω—É–ª "skipped/too_few_rows", –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ù–ï –∑–∞—è–≤–ª—è–µ–º –æ–± –æ–±—É—á–µ–Ω–∏–∏.
 * 3) –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ—Ç, predictProba —Å–ø–æ–∫–æ–π–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–ª–∏ (BUY/SELL/HOLD=0) –∏ –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç python-—Å–∫—Ä–∏–ø—Ç.
 * 4) –õ–æ–≥–∏ –Ω–µ –ø—É—Ç–∞—é—Ç timeframe –∏ –ø—É—Ç—å –∫ csv.
 */
@Slf4j
@Service
public class PythonInferenceServiceImpl implements PythonInferenceService {

    private static final Path PROJECT_ROOT = Path.of(System.getProperty("user.dir"));

    private static final Path PYTHON_EXECUTABLE =
            PROJECT_ROOT.resolve("python_ml/venv/Scripts/python.exe");

    private static final Path TRAIN_SCRIPT =
            PROJECT_ROOT.resolve("python_ml/ml_invest/train_ml_invest.py");

    private static final Path PREDICT_SCRIPT =
            PROJECT_ROOT.resolve("python_ml/ml_invest/predict_ml_invest.py");

    private static final Path DATASET_DIR =
            PROJECT_ROOT.resolve("python_ml/datasets");

    private static final Path MODEL_DIR =
            PROJECT_ROOT.resolve("python_ml/ml_invest");

    @Override
    public synchronized void trainIfNeeded(String datasetPath,
                                           Long chatId,
                                           String modelDir,
                                           String timeframe,
                                           Duration retrainPeriod,
                                           boolean force) {
        try {
            Files.createDirectories(DATASET_DIR);
            Files.createDirectories(MODEL_DIR);

            // dataset normalize
            Path dataset = Path.of(datasetPath);
            if (!dataset.isAbsolute()) {
                dataset = dataset.toString().endsWith(".csv")
                        ? DATASET_DIR.resolve(dataset)
                        : DATASET_DIR.resolve(dataset + ".csv");
            }

            // model dir normalize
            Path modelDirPath = Path.of(modelDir);
            if (!modelDirPath.isAbsolute()) {
                modelDirPath = MODEL_DIR;
            }
            Files.createDirectories(modelDirPath);

            // ensure dataset exists (header only)
            if (!Files.exists(dataset)) {
                log.warn("[ML] ‚ö†Ô∏è Dataset –Ω–µ –Ω–∞–π–¥–µ–Ω: {} ‚Üí —Å–æ–∑–¥–∞—é –ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω", dataset);
                Files.writeString(dataset, "timestamp,open,high,low,close,volume,symbol\n");
            }

            List<String> cmd = new ArrayList<>(List.of(
                    PYTHON_EXECUTABLE.toString(),
                    TRAIN_SCRIPT.toString(),
                    "--dataset", dataset.toString(),
                    "--model_dir", modelDirPath.toString()
            ));
            if (force) cmd.add("--force");

            log.info("[ML] üöÄ trainIfNeeded ‚Üí chatId={} tf={} dataset={}", chatId, timeframe, dataset);
            log.info("[ML] üöÄ –ó–∞–ø—É—Å–∫ Python: {}", cmd);

            ProcessBuilder pb = new ProcessBuilder(cmd);
            pb.redirectErrorStream(true);
            Process process = pb.start();

            String output;
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                output = reader.lines().collect(Collectors.joining("\n"));
            }

            int exit = process.waitFor();
            log.info("[ML] üß† Python output:\n{}", output);

            String status = extractStatus(output);

            if (exit == 0) {
                if ("skipped".equalsIgnoreCase(status) || "too_few_rows".equalsIgnoreCase(status)) {
                    log.warn("[ML] ‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç/–º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö). –ú–æ–¥–µ–ª—å –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å. chatId={}, tf={}", chatId, timeframe);
                } else {
                    log.info("[ML] ‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (chatId={}, tf={})", chatId, timeframe);
                }
            } else {
                log.error("[ML] ‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è (exit={})", exit);
            }

        } catch (Exception e) {
            log.error("[ML] ‚ùå –û—à–∏–±–∫–∞ trainIfNeeded", e);
        }
    }

    @Override
    public Map<String, Double> predictProba(String modelDir,
                                            Long chatId,
                                            String timeframe,
                                            String datasetPath) {
        try {
            Files.createDirectories(DATASET_DIR);
            Files.createDirectories(MODEL_DIR);

            // dataset normalize
            Path dataset = Path.of(datasetPath);
            if (!dataset.isAbsolute()) {
                dataset = dataset.toString().endsWith(".csv")
                        ? DATASET_DIR.resolve(dataset)
                        : DATASET_DIR.resolve(dataset + ".csv");
            }
            if (!Files.exists(dataset)) {
                log.warn("[ML] ‚ö†Ô∏è Dataset –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ predictProba: {}", dataset);
                return defaultMap();
            }

            // model dir normalize
            Path modelDirPath = Path.of(modelDir);
            if (!modelDirPath.isAbsolute()) {
                modelDirPath = MODEL_DIR;
            }

            // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
            Path mainModel = modelDirPath.resolve("ml_model.joblib");
            Path altModel  = PROJECT_ROOT.resolve("ml_invest/ml_model.joblib");

            boolean hasMain = Files.exists(mainModel);
            boolean hasAlt  = Files.exists(altModel);

            if (!hasMain && hasAlt) {
                log.info("[ML] ‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—É—Ç–∏: {}", altModel);
                modelDirPath = PROJECT_ROOT.resolve("ml_invest");
                hasMain = true;
            }

            if (!hasMain) {
                // –ú–æ–¥–µ–ª–∏ –Ω–µ—Ç ‚Äî –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º python-predict
                log.warn("[ML] ‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ {}, –Ω–∏ –≤ {} ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—é –Ω—É–ª–∏.", mainModel, altModel);
                return defaultMap();
            }

            List<String> cmd = new ArrayList<>(List.of(
                    PYTHON_EXECUTABLE.toString(),
                    PREDICT_SCRIPT.toString(),
                    "--model_dir", modelDirPath.toString(),
                    "--dataset", dataset.toString()
            ));

            log.info("[ML] üîÆ predictProba ‚Üí chatId={} tf={} modelDir={} dataset={}",
                    chatId, timeframe, modelDirPath, dataset);
            log.info("[ML] üîÆ predictProba cmd={}", cmd);

            ProcessBuilder pb = new ProcessBuilder(cmd);
            pb.redirectErrorStream(true);
            Process process = pb.start();

            String output;
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                output = reader.lines().collect(Collectors.joining("\n"));
            }

            int exit = process.waitFor();
            log.info("[ML] üß† Python output:\n{}", output);

            if (exit != 0) {
                log.error("[ML] ‚ùå –û—à–∏–±–∫–∞ predictProba (exit={}) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—é –Ω—É–ª–∏", exit);
                return defaultMap();
            }

            Map<String, Double> probs = parseJsonOutput(output);
            if (probs.isEmpty()) {
                log.warn("[ML] ‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—é –Ω—É–ª–∏");
                return defaultMap();
            }

            log.info("[ML] ‚úÖ predictProba result: {}", probs);
            return probs;

        } catch (Exception e) {
            log.error("[ML] ‚ùå –û—à–∏–±–∫–∞ predictProba", e);
            return defaultMap();
        }
    }

    /* ================= helpers ================= */

    private String extractStatus(String output) {
        try {
            String[] lines = output.split("\n");
            for (int i = lines.length - 1; i >= 0; i--) {
                String ln = lines[i].trim();
                if (ln.isEmpty()) continue;

                if (ln.startsWith("{") && ln.endsWith("}")) {
                    String s = ln.replaceAll("[{}\\\"]", "");
                    for (String pair : s.split(",")) {
                        String[] kv = pair.split(":");
                        if (kv.length == 2 && "status".equalsIgnoreCase(kv[0].trim())) {
                            return kv[1].trim();
                        }
                    }
                }
                if (!ln.contains("{") && !ln.contains("}") && !ln.contains(":") && ln.length() < 64) {
                    return ln;
                }
            }
        } catch (Exception ignore) {}
        return null;
    }

    private Map<String, Double> parseJsonOutput(String text) {
        Map<String, Double> res = new LinkedHashMap<>();
        try {
            String[] lines = text.trim().split("\n");
            String last = lines[lines.length - 1].trim();
            String json = last.startsWith("{") ? last : text.trim();

            json = json.replaceAll("[{}\" ]", "");
            for (String part : json.split(",")) {
                String[] kv = part.split(":");
                if (kv.length == 2) {
                    String key = kv[0].toUpperCase();
                    if ("BUY".equals(key) || "SELL".equals(key) || "HOLD".equals(key)) {
                        res.put(key, Double.parseDouble(kv[1]));
                    }
                }
            }
        } catch (Exception ignore) {}
        return res;
    }

    private Map<String, Double> defaultMap() {
        Map<String, Double> map = new LinkedHashMap<>();
        map.put("BUY", 0.0);
        map.put("SELL", 0.0);
        map.put("HOLD", 0.0);
        return map;
    }
}
